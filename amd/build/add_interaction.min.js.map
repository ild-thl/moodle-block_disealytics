{"version":3,"file":"add_interaction.min.js","sources":["../src/add_interaction.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Adds interactivity to view-templates and the main-template\n *\n * @module      block_disealytics/add_interaction\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Templates from 'core/templates';\nimport {get_string as getString} from 'core/str';\nimport {\n    allViewsEnabled,\n    anyViewsEnabled,\n    getCourseId,\n    getViewlist,\n    setScrollTo,\n    setScrollToElement,\n    setViewlist,\n    updateViewlist\n} from 'block_disealytics/view_selection';\nimport {updateView} from 'block_disealytics/update_view';\n\n/**\n * Initializes the view functionality with the specified viewname.\n * Calls registerEventListener.\n *\n * @param {string} viewname - The viewname in the format of 'viewname-view'.\n * @returns {void}\n */\nexport const init = (viewname) => {\n    registerEventListener(viewname);\n    if (!anyViewsEnabled()) {\n        const infoOnViews = document.querySelector('.show-when-no-view-enabled');\n        if (infoOnViews) {\n            // Remove the 'hidden' class to show the message.\n            infoOnViews.classList.remove('hidden');\n        }\n    }\n};\n\n/**\n * Sets up the editing mode functionality.\n * Adds event listeners to the toggle button, drag and drop functionality,\n * and add view buttons for each view in the editing mode.\n * When the toggle button is clicked, it triggers the \"editing\" mode update,\n * and sets up drag and drop functionality for view reordering.\n * When add view button is clicked, it adds the view to the dashboard and saves the updated view list.\n *\n * Is called in the javascript of the main.mustache template.\n *\n * @function\n * @returns {void}\n */\nexport const setEditingMode = () => {\n    const exitEditing = document.querySelector('#block_disealytics_main_exit-edit_button');\n    if (exitEditing) {\n        exitEditing.addEventListener(\"click\", function() {\n            updateSetting('toggle', 'editing');\n        });\n    }\n    const toggleButton = document.querySelector('.block_disealytics-toggle-editing');\n    if (toggleButton) {\n        toggleButton.addEventListener(\"click\", function() {\n            const noViewsParagraph = document.querySelector('.show-when-no-view-enabled');\n            if (!(noViewsParagraph.classList.contains('hidden'))) {\n                noViewsParagraph.classList.add('hidden');\n            }\n            updateSetting('toggle', 'editing');\n            // Drag and Drop.\n            const dropContainer = document.querySelector(\".block_disealytics-drop-container\");\n            getViewlist().forEach(({viewname}) => {\n                const viewContainer = document.querySelector('#block_disealytics-' + viewname);\n                // Set up drag and drop functionality.\n                viewContainer.addEventListener(\"dragstart\", () => {\n                    viewContainer.classList.add(\"dragging\");\n                });\n                viewContainer.addEventListener(\"dragend\", () => {\n                    viewContainer.classList.remove(\"dragging\");\n                    // Save the new order in the database.\n                    const allViewsContainer = document.querySelector(\".block_disealytics-all-views-container\");\n                    const viewElements = [...allViewsContainer.children];\n                    const updatedViews = [];\n                    viewElements.forEach(viewElement => {\n                        const viewname = viewElement.id.replace(/^block_disealytics-/, '');\n                        if (viewElement.textContent.trim() !== '') {\n                            const newView = {viewname: viewname, enabled: 1};\n                            updatedViews.push(newView);\n                        } else {\n                            const newView = {viewname: viewname, enabled: 0};\n                            updatedViews.push(newView);\n                        }\n                    });\n                    updateSetting('write', 'views', JSON.stringify(updatedViews));\n                });\n                // Show/Hide edit-buttons on views.\n                const editBtn = document.querySelector('.edit-button-' + viewname);\n                if (editBtn) {\n                    if (!editBtn.classList.contains('hidden')) {\n                        editBtn.classList.add('hidden');\n                    } else {\n                        editBtn.classList.remove('hidden');\n                    }\n                }\n            });\n            dropContainer.addEventListener(\"dragover\", (e) => {\n                e.preventDefault();\n                const afterElement = getDragAfterElement(dropContainer, e.clientY);\n                const draggable = document.querySelector('.dragging');\n                if (afterElement === null) {\n                    dropContainer.appendChild(draggable);\n                } else {\n                    dropContainer.insertBefore(draggable, afterElement);\n                }\n            });\n\n            // Add view button.\n            const addViewButton = document.querySelector('#block_disealytics-open-add-modal');\n            if (addViewButton) {\n                addViewButton.addEventListener(\"click\", async function() {\n                    try {\n                        const modal = await ModalFactory.create({\n                            title: await getString('main_add_view_title', 'block_disealytics'),\n                            body: await Templates.render('block_disealytics/addview_modal', {id: 6}),\n                            footer: await getString('plugin-version-details', 'block_disealytics'),\n                            removeOnClose: true\n                        });\n                        await modal.show();\n\n                        const allViews = document.querySelector('.show-when-all-views-enabled');\n                        const anyViewSelectable = document.querySelector('.show-when-any-view-selectable');\n\n                        if (!allViewsEnabled()) {\n                            anyViewSelectable.classList.remove('hidden');\n                            allViews.classList.add('hidden');\n                        } else {\n                            anyViewSelectable.classList.add('hidden');\n                            allViews.classList.remove('hidden');\n                        }\n\n                        // Add EventListeners to the Buttons.\n                        getViewlist().forEach(({viewname, enabled}) => {\n                            const addButton = document.querySelector('.block_disealytics-add-' + viewname);\n                            const viewContainer = document.querySelector('#block_disealytics-' + viewname);\n                            if (addButton) {\n                                if (!enabled) {\n                                    addButton.classList.remove('hidden');\n                                }\n                                addButton.addEventListener(\"click\", async function() {\n                                    addButton.classList.add('hidden');\n                                    viewContainer.parentElement.append(viewContainer);\n                                    viewContainer.setAttribute('data-visible', 'true');\n                                    setScrollToElement('block_disealytics-' + viewname);\n                                    setScrollTo(true);\n                                    const updatedViewList = updateViewlist(viewname, 'add');\n                                    await updateSetting('write', 'views', JSON.stringify(updatedViewList));\n                                    // This handles the information given to the user, when all views are used or not.\n                                    if (allViewsEnabled) {\n                                        allViews.classList.remove('hidden');\n                                        anyViewSelectable.classList.add('hidden');\n                                    } else {\n                                        allViews.classList.add('hidden');\n                                        anyViewSelectable.classList.remove('hidden');\n                                    }\n                                }, true);\n                            }\n                        });\n                    } catch (error) {\n                        window.console.error(\"Failed to open the add view modal:\", error);\n                    }\n                });\n            }\n        }, true);\n    }\n};\n\n/**\n * Get the element after which the dragged element should be inserted within a container.\n * The function finds the closest element based on the vertical position (y-coordinate).\n *\n * @param {HTMLElement} container - The container element containing draggable elements.\n * @param {number} y - The vertical position (y-coordinate) of the dragged element.\n * @returns {HTMLElement} The element after which the dragged element should be inserted.\n */\nconst getDragAfterElement = (container, y) => {\n    // Get an array of draggable elements within the container (excluding the currently dragging element).\n    const draggableElements = [...container.querySelectorAll('.draggable:not(.dragging)')];\n    // Use the `reduce` function to find the closest element based on the vertical position (y-coordinate).\n    return draggableElements.reduce((closest, child) => {\n        // Calculate the offset from the vertical center of each element to the dragged element's position.\n        const box = child.getBoundingClientRect();\n        const offset = y - box.top - box.height / 2;\n\n        // Update the closest element if the current offset is negative (above the dragged element) and\n        // closer to the dragged element than the previous closest element.\n        if (offset < 0 && offset > closest.offset) {\n            return {offset: offset, element: child};\n        } else {\n            return closest;\n        }\n    }, {offset: Number.NEGATIVE_INFINITY}).element;\n};\n\n/**\n * Registers event listeners (for a single view) that change the user preferences.\n *\n * @param {string} viewname - The viewname in the format of 'viewname-view'.\n * @returns {void}\n */\nconst registerEventListener = (viewname) => {\n    // Verify deletion modal.\n    const verifyDeletionButton = document.querySelector('.block_disealytics_remove_modal_' + viewname);\n    if (verifyDeletionButton) {\n        verifyDeletionButton.addEventListener(\"click\", async function() {\n            // Fetch necessary strings.\n            const modalRemoveText1 = await getString('modal_remove_text_1', 'block_disealytics');\n            const modalRemoveView = await getString(viewname, 'block_disealytics');\n            const modalRemoveText2 = await getString('modal_remove_text_2', 'block_disealytics');\n\n            // Create the modal with the custom content.\n            const modal = await ModalFactory.create({\n                type: ModalFactory.types.SAVE_CANCEL,\n                title: await getString('modal_remove_title', 'block_disealytics'),\n                body: `${modalRemoveText1} <strong>${modalRemoveView}</strong> ${modalRemoveText2}`,\n                removeOnClose: true,\n            });\n            modal.setSaveButtonText(await getString('modal_remove_check', 'block_disealytics'));\n            const cancelBtn = modal.getFooter().find(modal.getActionSelector('cancel'));\n            if (cancelBtn) {\n                cancelBtn.css('display', 'none');\n            }\n            modal.show();\n            modal.getRoot().on(ModalEvents.save, async function() {\n                const viewContainer = document.querySelector('#block_disealytics-' + viewname);\n                viewContainer.setAttribute('data-visible', 'false');\n                const updatedViewList = updateViewlist(viewname, 'delete');\n                await updateSetting('write', 'views', JSON.stringify(updatedViewList));\n            });\n        }, false);\n    }\n\n    // Toggle expansion.\n    const toggleExpansionButtons = document.querySelectorAll('.block_disealytics-toggle-expansion-btn-' + viewname);\n    [].forEach.call(toggleExpansionButtons, (e) => {\n        e.addEventListener(\"click\", function() {\n            setScrollTo(true);\n            updateSetting(\"write\", 'expanded_view', viewname);\n        }, false);\n    });\n    toggleInformationModal(viewname);\n    setCourseCategory(viewname);\n    toggleViewmodeAccordion(viewname);\n};\n\n/**\n * Generates the information modal.\n *\n * Is called in the javascript of the main.mustache template and in the registerEventListener function.\n *\n * @param {String} viewname - The button element that triggers the modal.\n * @returns {void}\n */\nexport const toggleInformationModal = (viewname) => {\n    const btn = document.querySelector(\"#block_disealytics_\" + viewname + \"_info_btn\");\n    const btnExpanded = document.querySelector(\"#block_disealytics_\" + viewname + \"_info_btn_expanded\");\n\n    if (btn) {\n        btn.addEventListener('click', async function() {\n            const footerContent = viewname === 'main' ?\n                '<div>' + await getString('plugin-version-details', 'block_disealytics') + '</div>' :\n                '';\n\n            const modal = await ModalFactory.create({\n                title: viewname === 'main' ?\n                    await getString('main_help_title', 'block_disealytics') :\n                    await getString(viewname, 'block_disealytics'),\n                body: viewname === 'main' ?\n                    await Templates.render('block_disealytics/help_modal', {id: 5}) :\n                    await getString(viewname + '_help_info_text', 'block_disealytics'),\n                footer: footerContent,\n                removeOnClose: true\n            });\n\n            await modal.show();\n\n            if (viewname === 'main') {\n                initHelpModalAccordion();\n            }\n        });\n    }\n\n    if (btnExpanded) {\n        btnExpanded.addEventListener('click', async function() {\n            const modal = await ModalFactory.create({\n                title: getString(viewname, 'block_disealytics'),\n                body: getString(viewname + '_help_info_text_expanded', 'block_disealytics'),\n                removeOnClose: true\n            });\n            modal.show();\n        });\n    }\n};\n\n/**\n * Generates the main config modal.\n *\n * Is called in the javascript of the main.mustache template.\n *\n * @returns {void}\n */\nexport const toggleMainConfigModal = () => {\n    const mainConfigBtn = document.querySelector(\"#block_disealytics_config_menu\");\n    if (mainConfigBtn) {\n        mainConfigBtn.addEventListener('click', async function() {\n            // Create the main config modal with custom content.\n            const modal = await ModalFactory.create({\n                title: await getString('main_config_title', 'block_disealytics'),\n                body: await Templates.render('block_disealytics/config_menu', {id: 1}),\n                removeOnClose: true\n            });\n\n            // Show the modal.\n            await modal.show();\n\n            // Wait until the modal content is fully shown.\n            if (modal.getRoot()) {\n                const mainConsentBtn = document.querySelector(\"#block_disealytics_config_consent_menu\");\n                if (mainConsentBtn) {\n                    const toggleIcon = mainConsentBtn.querySelector('i');\n\n                    mainConsentBtn.addEventListener('click', async function() {\n                        // Toggle icon classes.\n                        toggleIcon.classList.remove('disea-green', 'fa-toggle-on');\n                        toggleIcon.classList.add('disea-gray', 'fa-toggle-off');\n\n                        // Set a timeout to change the classes back after 1 second.\n                        setTimeout(() => {\n                            toggleIcon.classList.remove('disea-gray', 'fa-toggle-off');\n                            toggleIcon.classList.add('disea-green', 'fa-toggle-on');\n                        }, 1000);\n\n                        // Create and show the consent modal.\n                        const consentModal = await ModalFactory.create({\n                            title: await getString('consent_config_title', 'block_disealytics'),\n                            body: await Templates.render('block_disealytics/config_menu_consent', {id: 2}),\n                            removeOnClose: true\n                        });\n\n                        await consentModal.show();\n\n                        // Initialize consent buttons after the consent modal is shown.\n                        enableConsentButtons(consentModal);\n                    });\n                }\n            }\n        });\n    }\n};\n\nexport const initHelpModalAccordion = () => {\n    // Attach click event to each accordion head.\n    const accordion = document.getElementById('block_disealytics_info-modal-accordion');\n    const accordionHeads = document.querySelectorAll('#block_disealytics_info-modal-accordion .accordion-head');\n    accordionHeads.forEach((head, index) => {\n        head.addEventListener('click', () => {\n            toggleAccordion(accordion, index + 1);\n        });\n    });\n};\n\n/**\n * Toggles the visibility of an accordion content section and updates the toggle icon.\n *\n * @param {HTMLElement} element - The head element that surrounds the toggle function.\n * @param {number} index - The index of the accordion section to toggle.\n * @returns {void}\n */\nexport const toggleAccordion = (element, index) => {\n    const content = element.querySelector(`#content-${index}`);\n    const icon = element.querySelector(`#icon-${index}`);\n\n    if (content.classList.contains('active')) {\n        // Fold the content if it's open.\n        content.classList.remove('active');\n        icon.className = \"fa fa-chevron-down accordion-icon\";\n    } else {\n        // Unfold the content if it's closed.\n        content.classList.add('active');\n        icon.className = \"fa fa-chevron-up accordion-icon\";\n    }\n};\n\n/**\n * Retrieves the trimmed value of an HTML element by its ID.\n *\n * @function\n * @name getValueById\n * @param {string} id - The ID of the HTML element.\n * @returns {string} - The trimmed value of the specified element.\n */\nexport function getValueById(id) {\n    return document.getElementById(id).value.trim();\n}\n\n/**\n * Makes an AJAX call to change a user preference, then calls a view update.\n *\n * @param {string} updatetype - The type of update to perform (set, toggle, expand).\n * @param {string} setting - Determines which and how a user preference should be changed.\n * @param {string} val tmp.\n * @returns {void}\n */\nexport const updateSetting = (updatetype, setting, val = undefined) => {\n    let args = {\n        info: {\n            action: updatetype,\n            name: setting,\n        }\n    };\n    if (val !== undefined) {\n        args.info.value = val;\n    }\n    Ajax.call([{\n        methodname: 'block_disealytics_write_user_preference',\n        args,\n    }\n    ])[0].done(async function(response) {\n        if (setting === 'viewmode' || setting === 'editing') {\n            let views = getViewlist().filter((e) => e.enabled === 1).map((e) => e.viewname);\n            await updateView(getCourseId(), views);\n        } else {\n            if (setting === 'views') {\n                const data = JSON.parse(response);\n                setViewlist(JSON.parse(data.setting));\n                await updateView(getCourseId(), getViewlist());\n            } else if (setting === 'expanded_view') {\n                await updateView(getCourseId(), [val]);\n            } else {\n                await updateView(getCourseId(), undefined);\n            }\n        }\n        if (updatetype === 'select_category') {\n            await updateView(getCourseId(), [setting]);\n        }\n        if (updatetype === \"revoke_consent\") {\n            location.reload();\n        }\n    }).fail(function(err) {\n        window.console.log(err);\n    });\n};\n\n/**\n * Adds an EventListener to the viewmode dropdown.\n *\n * @returns {void}\n */\nexport const enableViewmodeDropdown = () => {\n    document.querySelector(\".main-viewmode-selection\").addEventListener(\"change\", function() {\n        let select = document.querySelector(\".main-viewmode-selection\");\n        const viewmodeLabel = document.querySelector(\".main-viewmode-label\");\n        if (viewmodeLabel) {\n            updateSetting(\"write\", 'viewmode', select.value);\n        }\n    });\n};\n\n/**\n * Adds an EventListener to the consent buttons.\n *\n * @param {object} modal - The modal to enable the buttons for.\n * @returns {void}\n */\nexport const enableConsentButtons = (modal = null) => {\n    document.querySelector(\".disea-delete-consent-btn\").addEventListener(\"click\", function() {\n        updateSetting(\"revoke_consent\", '', \"delete\");\n    });\n    document.querySelector(\".disea-save-consent-btn\").addEventListener(\"click\", function() {\n        updateSetting(\"revoke_consent\", '', '');\n    });\n    document.querySelector(\".disea-cancel-consent-btn\").addEventListener(\"click\", function() {\n        modal.destroy();\n    });\n};\n\nexport const setCourseCategory = (viewname) => {\n    const courseCategories = document.querySelectorAll(\".course-category-global-item-\" + viewname);\n\n    courseCategories.forEach(category => {\n        category.addEventListener(\"click\", function() {\n            const selectedCategory = this.textContent.trim();\n            updateSetting(\"select_category\", viewname, selectedCategory);\n        });\n    });\n};\n\nexport const toggleViewmodeAccordion = (viewname) => {\n    const accordionIcons = document.querySelectorAll('.course-category-icon-' + viewname);\n\n    accordionIcons.forEach(icon => {\n        if (icon) {\n            const container = icon.closest('.accordion-head-course-category-' + viewname);\n            if (container) {\n                icon.addEventListener('click', (event) => {\n                    event.stopPropagation(); // Prevent the click from reaching the container\n                    icon.classList.toggle('fa-chevron-down');\n                    icon.classList.toggle('fa-chevron-up');\n\n                    const panelBody = container.nextElementSibling;\n                    panelBody.classList.toggle('hidden');\n                });\n                container.addEventListener('click', () => {\n                    // Handle the click on the container (excluding the icon)\n                    icon.classList.toggle('fa-chevron-down');\n                    icon.classList.toggle('fa-chevron-up');\n\n                    const panelBody = container.nextElementSibling;\n                    panelBody.classList.toggle('hidden');\n                });\n            }\n        }\n    });\n};\n"],"names":["id","document","getElementById","value","trim","viewname","registerEventListener","infoOnViews","querySelector","classList","remove","exitEditing","addEventListener","updateSetting","toggleButton","noViewsParagraph","contains","add","dropContainer","forEach","_ref","viewContainer","viewElements","children","updatedViews","viewElement","replace","textContent","newView","enabled","push","JSON","stringify","editBtn","e","preventDefault","afterElement","getDragAfterElement","clientY","draggable","appendChild","insertBefore","addViewButton","async","modal","ModalFactory","create","title","body","Templates","render","footer","removeOnClose","show","allViews","anyViewSelectable","_ref2","addButton","parentElement","append","setAttribute","updatedViewList","allViewsEnabled","error","window","console","container","y","querySelectorAll","reduce","closest","child","box","getBoundingClientRect","offset","top","height","element","Number","NEGATIVE_INFINITY","verifyDeletionButton","modalRemoveText1","modalRemoveView","modalRemoveText2","type","types","SAVE_CANCEL","setSaveButtonText","cancelBtn","getFooter","find","getActionSelector","css","getRoot","on","ModalEvents","save","toggleExpansionButtons","call","toggleInformationModal","setCourseCategory","toggleViewmodeAccordion","btn","btnExpanded","footerContent","initHelpModalAccordion","mainConfigBtn","mainConsentBtn","toggleIcon","setTimeout","consentModal","enableConsentButtons","accordion","head","index","toggleAccordion","content","icon","className","updatetype","setting","val","undefined","args","info","action","name","methodname","done","response","views","filter","map","data","parse","location","reload","fail","err","log","select","destroy","category","selectedCategory","this","event","stopPropagation","toggle","nextElementSibling"],"mappings":"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"}