{"version":3,"file":"add_interaction.min.js","sources":["../src/add_interaction.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Adds interactivity to view-templates and the main-template\n *\n * @module      block_disealytics/add_interaction\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Templates from 'core/templates';\nimport {get_string as getString} from 'core/str';\nimport {\n    getCourseId,\n    getViewlist,\n    setScrollTo,\n    setScrollToElement,\n    setViewlist,\n    updateViewlist\n} from 'block_disealytics/view_selection';\nimport {anyViewsEnabled, updateView} from 'block_disealytics/update_view';\n\n/**\n * Initializes the view functionality with the specified viewname.\n * Calls registerEventListener.\n *\n * @param {string} viewname - The viewname in the format of 'viewname-view'.\n * @returns {void}\n */\nexport const init = (viewname) => {\n    registerEventListener(viewname);\n    if (!anyViewsEnabled()) {\n        const infoOnViews = document.querySelector('.show-when-no-view-exists');\n        if (infoOnViews) {\n            // Remove the 'hidden' class to show the message.\n            infoOnViews.classList.remove('hidden');\n        }\n    }\n    moveModalsToBodyEnd(viewname);\n};\n\n/**\n * Creates a container for modals and inserts it before the closing body tag.\n * Modals are moved into the container if they have the class 'block_disealytics-main-modal'.\n * @returns {void}\n */\nexport const createModalsContainer = () => {\n    // Create a div to contain all modals.\n    const modalsContainer = document.createElement('div');\n    modalsContainer.classList.add('block_disealytics');\n    modalsContainer.classList.add('block_disealytics-modals');\n    // Get the reference to the closing body tag.\n    const closingBodyTag = document.body.lastElementChild;\n    // Insert the container before the closing body tag.\n    document.body.insertBefore(modalsContainer, closingBodyTag);\n    const mainModals = document.querySelectorAll('.block_disealytics-main-modal');\n    if (mainModals && mainModals.length > 0) {\n        mainModals.forEach((modal) => {\n            modalsContainer.appendChild(modal);\n        });\n    }\n};\n\n/**\n * Moves specific modals with the given viewname into the modals container at the end of the body.\n * @param {string} viewname - The identifier for the modals.\n * @returns {void}\n */\nexport const moveModalsToBodyEnd = (viewname) => {\n    const configModals = document.querySelectorAll(`.${viewname}-config-modal`);\n    const plannerModals = document.querySelectorAll('.block_disealytics-planner-event-modal');\n    const modalsContainer = document.querySelector('.block_disealytics-modals');\n\n    if (modalsContainer) {\n        if (plannerModals && plannerModals.length > 0) {\n            plannerModals.forEach((modal) => {\n                modalsContainer.appendChild(modal);\n            });\n        }\n        if (configModals && configModals.length > 0) {\n            configModals.forEach((modal) => {\n                modalsContainer.appendChild(modal);\n            });\n        }\n    }\n};\n\n/**\n * Deletes modals within the modals container, excluding those with the class 'block_disealytics-main-modal'.\n * @returns {void}\n */\nexport const deleteModalsContainer = () => {\n    const modalsContainer = document.querySelector('.block_disealytics-modals');\n    Array.from(modalsContainer.children).forEach((child) => {\n        if (!child.classList.contains('block_disealytics-main-modal')) {\n            child.remove();\n        }\n    });\n};\n\n/**\n * Create a custom modal using a template.\n *\n * @param {string} linkToTemplate - The link to the template.\n * @param {Promise} title - The title of the modal.\n * @param {number} id - The ID parameter for the template.\n * @returns {Promise<object>} - A promise that resolves to the created modal.\n */\nexport const createDiseaModal = async(linkToTemplate, title, id) => {\n    return await ModalFactory.create({\n        title: title,\n        body: Templates.render(linkToTemplate, {id: id}),\n        removeOnClose: true\n    });\n};\n\n/**\n * Show a modal.\n *\n * @param {object} modal - The modal to show.\n */\nexport const showDiseaModal = async(modal) => {\n    const modalObj = await modal;\n    modalObj.show();\n};\n\n/**\n * Hide a modal.\n *\n * @param {object} modal - The modal to hide.\n */\nexport const hideDiseaModal = async(modal) => {\n    const modalObj = await modal;\n    modalObj.hide();\n};\n\n/**\n * Sets up the editing mode functionality.\n * Adds event listeners to the toggle button, drag and drop functionality,\n * and add view buttons for each view in the editing mode.\n * When the toggle button is clicked, it triggers the \"editing\" mode update,\n * and sets up drag and drop functionality for view reordering.\n * When add view button is clicked, it adds the view to the dashboard and saves the updated view list.\n *\n * Is called in the javascript of the main.mustache template.\n *\n * @function\n * @returns {void}\n */\nexport const setEditingMode = () => {\n    const exitEditing = document.querySelector('#block_disealytics_main_exit-edit_button');\n    if (exitEditing) {\n        exitEditing.addEventListener(\"click\", function() {\n            updateSetting('toggle', 'editing');\n        });\n    }\n    const toggleButton = document.querySelector('.block_disealytics-toggle-editing');\n    if (toggleButton) {\n        toggleButton.addEventListener(\"click\", function() {\n            updateSetting('toggle', 'editing');\n            const dropContainer = document.querySelector(\".block_disealytics-drop-container\");\n            getViewlist().forEach(({viewname}) => {\n                const viewContainer = document.querySelector('#block_disealytics-' + viewname);\n                // Set up drag and drop functionality.\n                viewContainer.addEventListener(\"dragstart\", () => {\n                    viewContainer.classList.add(\"dragging\");\n                });\n                viewContainer.addEventListener(\"dragend\", () => {\n                    viewContainer.classList.remove(\"dragging\");\n                    // Save the new order in the database.\n                    const allViewsContainer = document.querySelector(\".block_disealytics-all-views-container\");\n                    const viewElements = [...allViewsContainer.children];\n                    const updatedViews = [];\n                    viewElements.forEach(viewElement => {\n                        const viewname = viewElement.id.replace(/^block_disealytics-/, '');\n                        if (viewElement.textContent.trim() !== '') {\n                            const newView = {viewname: viewname, enabled: 1};\n                            updatedViews.push(newView);\n                        } else {\n                            const newView = {viewname: viewname, enabled: 0};\n                            updatedViews.push(newView);\n                        }\n                    });\n                    updateSetting('write', 'views', JSON.stringify(updatedViews));\n                });\n                // Show/Hide edit-buttons on views.\n                const editBtn = document.querySelector('.edit-button-' + viewname);\n                if (editBtn) {\n                    if (!editBtn.classList.contains('hidden')) {\n                        editBtn.classList.add('hidden');\n                    } else {\n                        editBtn.classList.remove('hidden');\n                    }\n                }\n            });\n            dropContainer.addEventListener(\"dragover\", (e) => {\n                e.preventDefault();\n                const afterElement = getDragAfterElement(dropContainer, e.clientY);\n                const draggable = document.querySelector('.dragging');\n                if (afterElement === null) {\n                    dropContainer.appendChild(draggable);\n                } else {\n                    dropContainer.insertBefore(draggable, afterElement);\n                }\n            });\n            if (!anyViewsEnabled()) {\n                const infoOnViews = document.querySelector('.show-when-no-view-exists');\n                if (infoOnViews) {\n                    // Remove the 'hidden' class to show the message.\n                    infoOnViews.classList.remove('hidden');\n                }\n            }\n\n        }, true);\n    }\n\n    // Add EventListeners to the Buttons.\n    getViewlist().forEach(({viewname, enabled}) => {\n        // Check if the view is disabled\n        // Add view button.\n        const addButton = document.querySelector('.block_disealytics-add-' + viewname);\n        const viewContainer = document.querySelector('#block_disealytics-' + viewname);\n        if (addButton) {\n            if (enabled === 1) {\n                addButton.classList.add('hidden');\n            }\n            addButton.addEventListener(\"click\", function() {\n                document.querySelector('.show-when-no-view-exists').classList.add('hidden');\n                addButton.classList.add('hidden');\n                viewContainer.parentElement.append(viewContainer);\n                viewContainer.setAttribute('data-visible', 'true');\n                setScrollToElement('block_disealytics-' + viewname);\n                setScrollTo(true);\n                const updatedViewList = updateViewlist(viewname, 'add');\n                updateSetting('write', 'views', JSON.stringify(updatedViewList));\n            }, true);\n        }\n    });\n};\n\n/**\n * Get the element after which the dragged element should be inserted within a container.\n * The function finds the closest element based on the vertical position (y-coordinate).\n *\n * @param {HTMLElement} container - The container element containing draggable elements.\n * @param {number} y - The vertical position (y-coordinate) of the dragged element.\n * @returns {HTMLElement} The element after which the dragged element should be inserted.\n */\nconst getDragAfterElement = (container, y) => {\n    // Get an array of draggable elements within the container (excluding the currently dragging element).\n    const draggableElements = [...container.querySelectorAll('.draggable:not(.dragging)')];\n    // Use the `reduce` function to find the closest element based on the vertical position (y-coordinate).\n    return draggableElements.reduce((closest, child) => {\n        // Calculate the offset from the vertical center of each element to the dragged element's position.\n        const box = child.getBoundingClientRect();\n        const offset = y - box.top - box.height / 2;\n\n        // Update the closest element if the current offset is negative (above the dragged element) and\n        // closer to the dragged element than the previous closest element.\n        if (offset < 0 && offset > closest.offset) {\n            return {offset: offset, element: child};\n        } else {\n            return closest;\n        }\n    }, {offset: Number.NEGATIVE_INFINITY}).element;\n};\n\n/**\n * Registers event listeners (for a single view) that change the user preferences.\n *\n * @param {string} viewname - The viewname in the format of 'viewname-view'.\n * @returns {void}\n */\nconst registerEventListener = (viewname) => {\n    // Verify deletion modal.\n    const verifyDeletionButton = document.querySelector('.block_disealytics_remove_modal_' + viewname);\n    if (verifyDeletionButton) {\n        verifyDeletionButton.addEventListener(\"click\", async function() {\n            // Fetch necessary strings.\n            const modalRemoveText1 = await getString('modal_remove_text_1', 'block_disealytics');\n            const modalRemoveView = await getString(viewname, 'block_disealytics');\n            const modalRemoveText2 = await getString('modal_remove_text_2', 'block_disealytics');\n\n            // Create the modal with the custom content.\n            const modal = await ModalFactory.create({\n                type: ModalFactory.types.SAVE_CANCEL,\n                title: await getString('modal_remove_title', 'block_disealytics'),\n                body: `${modalRemoveText1} <strong>${modalRemoveView}</strong> ${modalRemoveText2}`,\n                removeOnClose: true,\n            });\n            modal.setSaveButtonText(await getString('modal_remove_check', 'block_disealytics'));\n            modal.show();\n            modal.getRoot().on(ModalEvents.save, async () => {\n                const viewContainer = document.querySelector('#block_disealytics-' + viewname);\n                viewContainer.setAttribute('data-visible', 'false');\n                const addButton = document.querySelector('.block_disealytics-add-' + viewname);\n                addButton.classList.remove('hidden');\n                const updatedViewList = updateViewlist(viewname, 'delete');\n                await updateSetting('write', 'views', JSON.stringify(updatedViewList));\n            });\n        }, false);\n    }\n\n    // Toggle expansion.\n    const toggleExpansionButtons = document.querySelectorAll('.block_disealytics-toggle-expansion-btn-' + viewname);\n    [].forEach.call(toggleExpansionButtons, (e) => {\n        e.addEventListener(\"click\", function() {\n            setScrollTo(true);\n            updateSetting(\"write\", 'expanded_view', viewname);\n        }, false);\n    });\n    toggleInformationModal(viewname);\n    setCourseCategory(viewname);\n    toggleViewmodeAccordion(viewname);\n};\n\n/**\n * Generates the information modal.\n *\n * Is called in the javascript of the main.mustache template and in the registerEventListener function.\n *\n * @param {String} viewname - The button element that triggers the modal.\n * @returns {void}\n */\nexport const toggleInformationModal = (viewname) => {\n    const btn = document.querySelector(\"#block_disealytics_\" + viewname + \"_info_btn\");\n    const btnExpanded = document.querySelector(\"#block_disealytics_\" + viewname + \"_info_btn_expanded\");\n\n    if (btn) {\n        btn.addEventListener('click', async function() {\n            const modal = await ModalFactory.create({\n                title: viewname === 'main' ?\n                    getString('main_help_title', 'block_disealytics') :\n                    getString(viewname, 'block_disealytics'),\n                body: viewname === 'main' ?\n                    Templates.render('block_disealytics/help_modal', {id: 3}) :\n                    getString(viewname + '_help_info_text', 'block_disealytics'),\n                removeOnClose: true\n            });\n            modal.show();\n        });\n    }\n\n    if (btnExpanded) {\n        btnExpanded.addEventListener('click', async function() {\n            const modal = await ModalFactory.create({\n                title: getString(viewname, 'block_disealytics'),\n                body: getString(viewname + '_help_info_text_expanded', 'block_disealytics'),\n                removeOnClose: true\n            });\n            modal.show();\n        });\n    }\n};\n\n/**\n * Generates the main config modal.\n *\n * Is called in the javascript of the main.mustache template.\n *\n * @returns {void}\n */\nexport const toggleMainConfigModal = () => {\n    const mainConfigBtn = document.querySelector(\"#block_disealytics_config_menu\");\n    if (mainConfigBtn) {\n        mainConfigBtn.addEventListener('click', async function() {\n            // Create the main config modal with custom content.\n            const modal = await ModalFactory.create({\n                title: await getString('main_config_title', 'block_disealytics'),\n                body: await Templates.render('block_disealytics/config_menu', {id: 1}),\n                removeOnClose: true\n            });\n\n            // Show the modal.\n            await modal.show();\n\n            // Wait until the modal content is fully shown.\n            if (modal.getRoot()) {\n                const mainConsentBtn = document.querySelector(\"#block_disealytics_config_consent_menu\");\n                if (mainConsentBtn) {\n                    const toggleIcon = mainConsentBtn.querySelector('i');\n\n                    mainConsentBtn.addEventListener('click', async function() {\n                        // Toggle icon classes.\n                        toggleIcon.classList.remove('disea-green', 'fa-toggle-on');\n                        toggleIcon.classList.add('disea-gray', 'fa-toggle-off');\n\n                        // Set a timeout to change the classes back after 1 second.\n                        setTimeout(() => {\n                            toggleIcon.classList.remove('disea-gray', 'fa-toggle-off');\n                            toggleIcon.classList.add('disea-green', 'fa-toggle-on');\n                        }, 1000);\n\n                        // Create and show the consent modal.\n                        const consentModal = await ModalFactory.create({\n                            title: await getString('consent_config_title', 'block_disealytics'),\n                            body: await Templates.render('block_disealytics/config_menu_consent', {id: 2}),\n                            removeOnClose: true\n                        });\n\n                        await consentModal.show();\n\n                        // Initialize consent buttons after the consent modal is shown.\n                        enableConsentButtons(consentModal);\n                    });\n                }\n            }\n        });\n    }\n};\n\n\n/**\n * Toggles the visibility of an accordion content section and updates the toggle icon.\n *\n * @param {HTMLElement} element - The head element that surrounds the toggle function.\n * @param {number} index - The index of the accordion section to toggle.\n * @returns {void}\n */\nexport function toggleAccordion(element, index) {\n    const content = element.querySelector(`#content-${index}`);\n    const icon = element.querySelector(`#icon-${index}`);\n\n    if (content.classList.contains('active')) {\n        // Fold the content if it's open.\n        content.classList.remove('active');\n        icon.className = \"fa fa-chevron-down accordion-icon\";\n    } else {\n        // Unfold the content if it's closed.\n        content.classList.add('active');\n        icon.className = \"fa fa-chevron-up accordion-icon\";\n    }\n}\n\n/**\n * Retrieves the trimmed value of an HTML element by its ID.\n *\n * @function\n * @name getValueById\n * @param {string} id - The ID of the HTML element.\n * @returns {string} - The trimmed value of the specified element.\n */\nexport function getValueById(id) {\n    return document.getElementById(id).value.trim();\n}\n\n/**\n * Makes an AJAX call to change a user preference, then calls a view update.\n *\n * @param {string} updatetype - The type of update to perform (set, toggle, expand).\n * @param {string} setting - Determines which and how a user preference should be changed.\n * @param {string} val tmp.\n * @returns {void}\n */\nexport const updateSetting = (updatetype, setting, val = undefined) => {\n    let args = {\n        info: {\n            action: updatetype,\n            name: setting,\n        }\n    };\n    if (val !== undefined) {\n        args.info.value = val;\n    }\n    Ajax.call([{\n        methodname: 'block_disealytics_write_user_preference',\n        args,\n    }\n    ])[0].done(async function(response) {\n        // Remove contents of the modal container.\n        await deleteModalsContainer();\n        if (setting === 'viewmode' || setting === 'editing') {\n            let views = getViewlist().filter((e) => e.enabled === 1).map((e) => e.viewname);\n            await updateView(getCourseId(), views);\n        } else {\n            if (setting === 'views') {\n                const data = JSON.parse(response);\n                setViewlist(JSON.parse(data.setting));\n                await updateView(getCourseId(), getViewlist());\n            } else if (setting === 'expanded_view') {\n                await updateView(getCourseId(), [val]);\n            } else {\n                await updateView(getCourseId(), undefined);\n            }\n        }\n        if (updatetype === 'select_category') {\n            await updateView(getCourseId(), [setting]);\n        }\n        if (updatetype === \"revoke_consent\") {\n            location.reload();\n        }\n    }).fail(function(err) {\n        window.console.log(err);\n    });\n};\n\n/**\n * Adds an EventListener to the viewmode dropdown.\n *\n * @returns {void}\n */\nexport const enableViewmodeDropdown = () => {\n    document.querySelector(\".main-viewmode-selection\").addEventListener(\"change\", function() {\n        let select = document.querySelector(\".main-viewmode-selection\");\n        const viewmodeLabel = document.querySelector(\".main-viewmode-label\");\n        if (viewmodeLabel) {\n            updateSetting(\"write\", 'viewmode', select.value);\n        }\n    });\n};\n\n/**\n * Adds an EventListener to the consent buttons.\n *\n * @param {object} modal - The modal to enable the buttons for.\n * @returns {void}\n */\nexport const enableConsentButtons = (modal = null) => {\n    document.querySelector(\".disea-delete-consent-btn\").addEventListener(\"click\", function() {\n        updateSetting(\"revoke_consent\", '', \"delete\");\n    });\n    document.querySelector(\".disea-save-consent-btn\").addEventListener(\"click\", function() {\n        updateSetting(\"revoke_consent\", '', '');\n    });\n    document.querySelector(\".disea-cancel-consent-btn\").addEventListener(\"click\", function() {\n        modal.destroy();\n    });\n};\n\nexport const setCourseCategory = (viewname) => {\n    const courseCategories = document.querySelectorAll(\".course-category-global-item-\" + viewname);\n\n    courseCategories.forEach(category => {\n        category.addEventListener(\"click\", function() {\n            const selectedCategory = this.textContent.trim();\n            updateSetting(\"select_category\", viewname, selectedCategory);\n        });\n    });\n};\n\nexport const toggleViewmodeAccordion = (viewname) => {\n    const accordionIcons = document.querySelectorAll('.course-category-icon-' + viewname);\n\n    accordionIcons.forEach(icon => {\n        if (icon) {\n            const container = icon.closest('.accordion-head-course-category-' + viewname);\n            if (container) {\n                icon.addEventListener('click', (event) => {\n                    event.stopPropagation(); // Prevent the click from reaching the container\n                    icon.classList.toggle('fa-chevron-down');\n                    icon.classList.toggle('fa-chevron-up');\n\n                    const panelBody = container.nextElementSibling;\n                    panelBody.classList.toggle('hidden');\n                });\n                container.addEventListener('click', () => {\n                    // Handle the click on the container (excluding the icon)\n                    icon.classList.toggle('fa-chevron-down');\n                    icon.classList.toggle('fa-chevron-up');\n\n                    const panelBody = container.nextElementSibling;\n                    panelBody.classList.toggle('hidden');\n                });\n            }\n        }\n    });\n};\n\nexport const toggleAccordionAV = (icon) => {\n    const coursename = icon.dataset.coursename;\n    const table = document.querySelector(`.table-of-assignments[data-coursename=\"${coursename}\"]`);\n\n\n    if (icon.classList.contains('active')) {\n        // Fold the content if it's open.\n        icon.classList.remove('active');\n        icon.classList.replace('fa-chevron-up', 'fa-chevron-down');\n        table.classList.remove('hidden');\n    } else {\n        // Unfold the content if it's closed.\n        icon.classList.add('active');\n        icon.classList.replace('fa-chevron-down', 'fa-chevron-up');\n        table.classList.add('hidden');\n    }\n};\n\n"],"names":["id","document","getElementById","value","trim","element","index","content","querySelector","icon","classList","contains","remove","className","add","viewname","registerEventListener","infoOnViews","moveModalsToBodyEnd","modalsContainer","createElement","closingBodyTag","body","lastElementChild","insertBefore","mainModals","querySelectorAll","length","forEach","modal","appendChild","configModals","plannerModals","deleteModalsContainer","Array","from","children","child","async","linkToTemplate","title","ModalFactory","create","Templates","render","removeOnClose","show","hide","exitEditing","addEventListener","updateSetting","toggleButton","dropContainer","_ref","viewContainer","viewElements","updatedViews","viewElement","replace","textContent","newView","enabled","push","JSON","stringify","editBtn","e","preventDefault","afterElement","getDragAfterElement","clientY","draggable","_ref2","addButton","parentElement","append","setAttribute","updatedViewList","container","y","reduce","closest","box","getBoundingClientRect","offset","top","height","Number","NEGATIVE_INFINITY","verifyDeletionButton","modalRemoveText1","modalRemoveView","modalRemoveText2","type","types","SAVE_CANCEL","setSaveButtonText","getRoot","on","ModalEvents","save","toggleExpansionButtons","call","toggleInformationModal","setCourseCategory","toggleViewmodeAccordion","btn","btnExpanded","mainConfigBtn","mainConsentBtn","toggleIcon","setTimeout","consentModal","enableConsentButtons","updatetype","setting","val","undefined","args","info","action","name","methodname","done","response","views","filter","map","data","parse","location","reload","fail","err","window","console","log","select","destroy","category","selectedCategory","this","event","stopPropagation","toggle","nextElementSibling","coursename","dataset","table"],"mappings":"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"}