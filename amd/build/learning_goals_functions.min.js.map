{"version":3,"file":"learning_goals_functions.min.js","sources":["../src/learning_goals_functions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport Ajax from 'core/ajax';\nimport {updateView} from \"./update_view\";\nimport {getCourseId} from \"./view_selection\";\nimport {toggleAccordion} from \"./add_interaction\";\n\n/**\n * Initialize the learning goals interface.\n *\n * This function initializes the learning goals interface by setting up the due date, handling checkboxes,\n * and performing other necessary setup tasks.\n */\nexport const init = () => {\n    initGoalDueDate();\n    handleCheckboxes();\n    // Attach click event to each accordion head if not already present.\n    const accordion = document.getElementById('learning-goals-panel-accordion');\n    const accordionHeads = document.querySelectorAll('#learning-goals-panel-accordion .accordion-head');\n    accordionHeads.forEach((head, index) => {\n        // Check if the event listener is already attached.\n        if (head.dataset.listenerAttached !== 'true') {\n            head.addEventListener('click', () => {\n                toggleAccordion(accordion, index + 1);\n            });\n            // Mark the event listener as attached.\n            head.dataset.listenerAttached = 'true';\n        }\n    });\n};\n\n/**\n * Initialize event listeners for buttons and elements related to managing learning goals.\n *\n * This function attaches event listeners for buttons and elements used in the learning goals interface,\n * including showing/hiding the goal form, saving goals, canceling/resetting the form, deleting goals,\n * and enabling editing mode for goals.\n */\nexport function initGoalEventListeners() {\n    // The button to show the goal form.\n    const showGoalFormBtn = document.getElementById('show-goal-form');\n    // The goal form.\n    const createGoalForm = document.getElementById('create-goal-container');\n    // The button to add goals.\n    const saveGoalBtn = document.getElementById('save-goal');\n    // The button to cancel and reset the form.\n    const cancelGoalBtn = document.getElementById('cancel-goal');\n    // Warning if there are too many goals already.\n    const goalLimitBtn = document.getElementById('goal-limit');\n    // Warning if there is something wrong/missing.\n    const goalsInvalidBtns = document.getElementsByClassName('goal-invalid');\n    // The button to delete a goal permanently.\n    const deleteGoalBtns = document.querySelectorAll('.delete-goal');\n    // The button to edit goals.\n    const editGoalsBtn = document.getElementById('edit-goals');\n\n    // This checks if the limit of 20 goals is reached.\n    const learningGoalProgress = document.getElementById('learning-goals-progress');\n    if (learningGoalProgress) {\n        if (Number(learningGoalProgress.getAttribute('max')) >= 30) {\n            goalLimitBtn.classList.remove('hidden');\n            showGoalFormBtn.classList.add('hidden');\n        }\n    }\n\n    // Show the create a goal form.\n    if (showGoalFormBtn) {\n        showGoalFormBtn.addEventListener('click', function() {\n            createGoalForm.classList.remove('hidden');\n        });\n    }\n\n    // Saving goal in database.\n    if (saveGoalBtn) {\n        saveGoalBtn.addEventListener('click', function() {\n            saveGoal();\n        });\n    }\n\n    // Cancel/reset the create a goal form.\n    if (cancelGoalBtn) {\n        cancelGoalBtn.addEventListener('click', function() {\n            const goalNameInput = document.getElementById('goal-name-input');\n\n            // Reset the form.\n            goalNameInput.value = '';\n            initGoalDueDate();\n            createGoalForm.classList.add('hidden');\n            for (const goalInvalidBtn of goalsInvalidBtns) {\n                goalInvalidBtn.classList.add('hidden');\n            }\n        });\n    }\n\n    // Delete a goal from the database.\n    for (const deleteGoalBtn of deleteGoalBtns) {\n        deleteGoalBtn.addEventListener('click', function() {\n            const goalId = deleteGoalBtn.parentNode.id;\n            deleteGoal(goalId);\n        });\n    }\n\n    // Turn editing mode on.\n    if (editGoalsBtn) {\n        editGoalsBtn.addEventListener('click', () => {\n            // Set the color for the editing pencil on/off.\n            if (editGoalsBtn.querySelector('i').classList.contains('editing-off')) {\n                editGoalsBtn.querySelector('i').classList.remove('editing-off');\n                editGoalsBtn.querySelector('i').style.color = 'var(--diseared)';\n            } else {\n                editGoalsBtn.querySelector('i').classList.add('editing-off');\n                editGoalsBtn.querySelector('i').style.color = 'var(--diseablue)';\n            }\n            // Turn settings for editing mode on.\n            setEditingModeForLearningGoals();\n        });\n    }\n}\n\n/**\n * Sets the editing mode for learning goals.\n *\n * This function hides the create-goal-container, activates the editing mode for accordion contents (goals),\n * and manages the display of goal content and associated buttons for editing and canceling.\n */\nfunction setEditingModeForLearningGoals() {\n    const createGoalContainer = document.getElementById('create-goal-container');\n    if (!createGoalContainer.classList.contains('hidden')) {\n        createGoalContainer.classList.add('hidden');\n    }\n    const accordionContents = document.querySelectorAll('.accordion-content');\n    for (const accordionContent of accordionContents) {\n        if (accordionContent.classList.contains('edit-mode')) {\n            accordionContent.classList.remove('edit-mode');\n            accordionContent.classList.remove('active');\n        } else {\n            accordionContent.classList.add('edit-mode');\n            accordionContent.classList.add('active');\n        }\n    }\n    const goalContents = document.querySelectorAll('.goal-content');\n    for (const goalContent of goalContents) {\n        const viewMode = goalContent.querySelector('.goal-view-mode');\n        const editMode = goalContent.querySelector('.goal-edit-mode');\n        const goalsInvalidBtns = goalContent.querySelectorAll('.goal-invalid');\n        const editBtn = goalContent.querySelector('#edit-goal');\n        if (editBtn.classList.contains('hidden')) {\n            editBtn.classList.remove('hidden');\n        } else {\n            editBtn.classList.add('hidden');\n        }\n        editBtn.addEventListener('click', () => {\n            editMode.classList.remove('hidden');\n            viewMode.classList.add('hidden');\n            // Edit the goal in the database.\n            editGoal(goalContent);\n        });\n        // Cancel Button.\n        const cancelEditBtn = goalContent.querySelector('#cancel-goal-edit');\n        if (cancelEditBtn) {\n            cancelEditBtn.addEventListener('click', () => {\n                editMode.classList.add('hidden');\n                viewMode.classList.remove('hidden');\n                for (const goalInvalidBtn of goalsInvalidBtns) {\n                    goalInvalidBtn.classList.add('hidden');\n                }\n            });\n        }\n    }\n}\n\n/**\n * Initializes the goal due date and time input fields with current date and time values.\n */\nfunction initGoalDueDate() {\n    const goalDueDateInput = document.getElementById('goal-due-date-input');\n    const goalDueTimeInput = document.getElementById('goal-due-time-input');\n\n    const now = new Date();\n    const currentDate = `${now.getFullYear()}-${(now.getMonth() + 1)\n        .toString().padStart(2, '0')}-${now.getDate()\n        .toString().padStart(2, '0')}`;\n    const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\n\n    if (goalDueDateInput) {\n        goalDueDateInput.value = currentDate;\n        goalDueDateInput.min = currentDate;\n    }\n\n    if (goalDueTimeInput) {\n        goalDueTimeInput.value = currentTime;\n    }\n}\n\n/**\n * Validates input values for a goal.\n *\n * @param {string} goalType - The type of action the validation is needed for (new/update).\n * @param {string} name - The goal name to validate.\n * @param {Date} dateTime - The date and time to validate.\n * @param {string} dateTimeStr - The date and time as a string.\n * @param {Element} [goalContent=null] - The goal content element (used for 'update' type).\n *\n * @returns {boolean} True if all validation checks pass, false otherwise.\n */\nfunction validateInputs(goalType, name, dateTime, dateTimeStr, goalContent = null) {\n    // All warnings.\n    let goalsInvalid = document.getElementsByClassName('goal-invalid');\n    let goalNameMissing, goalDateMissing, goalNameInvalid;\n\n    if (goalType === 'new') {\n        // Warning if the name is not filled out.\n        goalNameMissing = document.getElementById('goal-name-missing');\n        // Warning if the date is not filled out.\n        goalDateMissing = document.getElementById('goal-date-missing');\n        // Warning if the name is wrong.\n        goalNameInvalid = document.getElementById('goal-name-invalid');\n    }\n\n    if (goalType === 'update') {\n        // Warning if the name is not filled out.\n        goalNameMissing = goalContent.querySelector('#edit-goal-name-missing');\n        // Warning if the date is not filled out.\n        goalDateMissing = goalContent.querySelector('#edit-goal-date-missing');\n        // Warning if the name is wrong.\n        goalNameInvalid = goalContent.querySelector('#edit-goal-name-invalid');\n    }\n\n    if (name.trim() === '') {\n        for (const goalInvalid of goalsInvalid) {\n            goalInvalid.classList.add('hidden');\n        }\n        goalNameMissing.classList.remove('hidden');\n        return false;\n    }\n    if (!/^[a-zA-Z0-9\\s!?äöüÄÖÜßéè]+$/.test(name)) {\n        for (const goalInvalid of goalsInvalid) {\n            goalInvalid.classList.add('hidden');\n        }\n        goalNameInvalid.classList.remove('hidden');\n\n        return false;\n    }\n    if (!dateTimeStr || isNaN(dateTime)) {\n        for (const goalInvalid of goalsInvalid) {\n            goalInvalid.classList.add('hidden');\n        }\n        goalDateMissing.classList.remove('hidden');\n        return false;\n    }\n    // All validation checks passed.\n    return true;\n}\n\n/**\n * Saves a learning goal to the database after validating inputs.\n *\n * @async\n * @function\n * @returns {Promise<void>} A promise that resolves when the goal is saved successfully or rejects on error.\n */\nasync function saveGoal() {\n    try {\n        const goalNameInput = document.getElementById('goal-name-input').value;\n        const selectedDate = document.getElementById('goal-due-date-input').value;\n        const selectedTime = document.getElementById('goal-due-time-input').value;\n        const combinedDateTimeString = `${selectedDate}T${selectedTime}`;\n        const combinedDateTime = new Date(combinedDateTimeString);\n\n        // Validate inputs before submitting.\n        if (validateInputs('new', goalNameInput, combinedDateTime, combinedDateTimeString)) {\n            const timestamp = Number(combinedDateTime.getTime() / 1000);\n            const courseId = getCourseId();\n\n            await new Promise((resolve, reject) => {\n                Ajax.call([{\n                    methodname: 'block_disealytics_add_learning_goal',\n                    args: {\n                        courseid: courseId,\n                        goalname: goalNameInput,\n                        duedate: timestamp,\n                    }\n                }])[0].done(function() {\n                    // Resolve the promise when done.\n                    resolve();\n                }).fail(function(err) {\n                    // Reject the promise if there's an error.\n                    reject(err);\n                });\n            });\n\n            // Update the view after saving the goal.\n            updateView(courseId, ['learning-goals-view']);\n        }\n    } catch (error) {\n        // Handle any errors here.\n        window.console.error(error);\n    }\n}\n\n/**\n * Handles checkboxes for marking learning goals as finished or unfinished.\n *\n * This function automatically checks checkboxes for finished goals,\n * and it adds event listeners to update goal statuses based on checkbox changes.\n */\nfunction handleCheckboxes() {\n    // Select all elements that are finished.\n    const finishedGoals = document.querySelectorAll('[data-goal-finished=\"true\"]');\n    finishedGoals.forEach(goal => {\n        // Mark the checkbox checked.\n        const checkbox = goal.querySelector('.goal-checkbox');\n        // Check the checkbox.\n        checkbox.checked = true;\n        const name = goal.querySelector('.goal-name');\n        const date = goal.querySelector('.goal-date');\n\n        name.classList.add('strikethrough');\n        date.classList.add('strikethrough');\n\n    });\n\n    // Get all checkboxes.\n    const allCheckboxes = document.querySelectorAll('.goal-checkbox');\n    allCheckboxes.forEach(checkbox => {\n        checkbox.addEventListener('change', async function() {\n            const id = checkbox.id.replace(\"goal-\", \"\");\n            const goalContent = checkbox.parentNode.parentNode.parentNode;\n            const name = goalContent.querySelector('.goal-name');\n            const date = goalContent.querySelector('.goal-date');\n            const dateTimestamp = goalContent.getAttribute('data-goal-timestamp');\n\n            if (checkbox.checked) {\n                name.classList.add('strikethrough');\n                date.classList.add('strikethrough');\n\n                try {\n                    await updateGoal(id, name.innerText, dateTimestamp, true);\n                    // Update was successful.\n                } catch (error) {\n                    // Handle error here.\n                    window.console.error(error);\n                }\n            } else {\n                name.classList.remove('strikethrough');\n                date.classList.remove('strikethrough');\n\n                try {\n                    await updateGoal(id, name.innerText, dateTimestamp, false);\n                    // Update was successful.\n                } catch (error) {\n                    // Handle error here.\n                    window.console.error(error);\n                }\n            }\n        });\n    });\n}\n\n/**\n * Edits a learning goal's details.\n *\n * This function retrieves and displays a learning goal's information for editing.\n * It allows the user to modify the goal's name and due date, and then save the changes.\n *\n * @param {HTMLElement} goalContent - The container element for the learning goal to be edited.\n */\nfunction editGoal(goalContent) {\n    // Get elements.\n    const goalId = goalContent.getAttribute('data-goal-id');\n    const goalName = goalContent.querySelector('.goal-name');\n    const goalTimestamp = goalContent.getAttribute('data-goal-timestamp');\n    const goalStatus = goalContent.getAttribute('finished');\n\n    // Name.\n    const goalSetNameInput = goalContent.querySelector('#goal-set-name-input');\n    goalSetNameInput.value = goalName.innerText;\n\n    // Date.\n    const originalDate = new Date(goalTimestamp * 1000);\n    const goalSetDateInput = goalContent.querySelector('#goal-set-date-input');\n    const goalSetTimeInput = goalContent.querySelector('#goal-set-time-input');\n    goalSetDateInput.value = originalDate.toISOString().slice(0, 10);\n    goalSetDateInput.min = originalDate.toISOString().slice(0, 10);\n    goalSetTimeInput.value = originalDate.toISOString().slice(11, 16);\n\n    // Save updated goal.\n    const saveEditBtn = goalContent.querySelector('#save-goal-edit');\n    if (saveEditBtn) {\n        saveEditBtn.addEventListener('click', async function() {\n            const updatedName = goalSetNameInput.value;\n            const updatedDate = goalSetDateInput.value;\n            const updatedTime = goalSetTimeInput.value;\n            const combinedDateTimeString = `${updatedDate}T${updatedTime}`;\n            const combinedDateTime = new Date(combinedDateTimeString);\n\n            // Validate inputs before submitting.\n            if (validateInputs('update', updatedName, combinedDateTime, combinedDateTimeString, goalContent)) {\n                const updatedTimestamp = Number(combinedDateTime.getTime() / 1000);\n                await updateGoal(goalId, updatedName, updatedTimestamp, goalStatus).then(() => {\n                    return setEditingModeForLearningGoals();\n                });\n            }\n        });\n    }\n}\n\n/**\n * Updates a learning goal in the database.\n *\n * This function sends a request to update a learning goal with the provided details.\n *\n * @async\n * @function\n * @param {string} id - The ID of the learning goal to update.\n * @param {string} name - The updated name for the learning goal.\n * @param {string} date - The updated due date for the learning goal (in timestamp format).\n * @param {boolean} finished - Indicates whether the learning goal is finished (true) or not (false).\n * @returns {Promise<void>} A promise that resolves when the goal is updated successfully or rejects on error.\n */\nasync function updateGoal(id, name, date, finished) {\n    return new Promise((resolve, reject) => {\n        Ajax.call([{\n            methodname: 'block_disealytics_update_learning_goal',\n            args: {\n                goalid: id,\n                goalname: name,\n                duedate: date,\n                finished: finished === true ? 1 : 0\n            }\n        }])[0].done(function() {\n            updateView(getCourseId(), ['learning-goals-view']);\n            resolve(); // Resolve the promise when done\n        }).fail(function(err) {\n            window.console.error(err);\n            reject(err); // Reject the promise if there's an error\n        });\n    });\n}\n\n/**\n * Deletes a learning goal from the database.\n *\n * This function sends a request to delete a learning goal with the specified ID.\n *\n * @param {string} id - The ID of the learning goal to delete.\n * @returns {Promise<void>} A promise that resolves when the goal is deleted successfully or rejects on error.\n */\nfunction deleteGoal(id) {\n    return new Promise((resolve, reject) => {\n        Ajax.call([{\n            methodname: 'block_disealytics_delete_learning_goal',\n            args: {\n                goalid: id\n            }\n        }])[0].done(function() {\n            // Update the view after successfully deleting the goal.\n            updateView(getCourseId(), ['learning-goals-view']);\n            // Resolve the promise when done.\n            resolve();\n        }).fail(function(err) {\n            // Log the error to the console.\n            window.console.error(err);\n            // Reject the promise if there's an error.\n            reject(err);\n        });\n    });\n}\n\n"],"names":["showGoalFormBtn","document","getElementById","createGoalForm","saveGoalBtn","cancelGoalBtn","goalLimitBtn","goalsInvalidBtns","getElementsByClassName","deleteGoalBtns","querySelectorAll","editGoalsBtn","learningGoalProgress","Number","getAttribute","classList","remove","add","addEventListener","goalNameInput","value","selectedDate","selectedTime","combinedDateTimeString","combinedDateTime","Date","validateInputs","timestamp","getTime","courseId","Promise","resolve","reject","call","methodname","args","courseid","goalname","duedate","done","fail","err","error","window","console","saveGoal","initGoalDueDate","goalInvalidBtn","deleteGoalBtn","goalId","parentNode","id","goalid","querySelector","contains","style","color","setEditingModeForLearningGoals","createGoalContainer","accordionContents","accordionContent","goalContents","goalContent","viewMode","editMode","editBtn","editGoal","cancelEditBtn","goalDueDateInput","goalDueTimeInput","now","currentDate","getFullYear","getMonth","toString","padStart","getDate","currentTime","getHours","getMinutes","min","goalType","name","dateTime","dateTimeStr","goalNameMissing","goalDateMissing","goalNameInvalid","goalsInvalid","trim","goalInvalid","test","isNaN","goalName","goalTimestamp","goalStatus","goalSetNameInput","innerText","originalDate","goalSetDateInput","goalSetTimeInput","toISOString","slice","saveEditBtn","async","updatedName","updatedDate","updatedTime","updatedTimestamp","updateGoal","then","date","finished","forEach","goal","checked","checkbox","replace","dateTimestamp","handleCheckboxes","accordion","head","index","dataset","listenerAttached"],"mappings":"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"}