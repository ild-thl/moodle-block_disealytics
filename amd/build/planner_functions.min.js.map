{"version":3,"file":"planner_functions.min.js","sources":["../src/planner_functions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport Ajax from 'core/ajax';\nimport {get_string as getString} from 'core/str';\nimport {updateView} from \"./update_view\";\nimport {getCourseId} from \"./view_selection\";\nimport {getValueById} from \"./add_interaction\";\nimport ModalFactory from 'core/modal_factory';\nimport Templates from \"core/templates\";\nimport ModalEvents from \"core/modal_events\";\n\n/**\n * Initialize the planner-view interactions.\n *\n */\nexport const init = async() => {\n    await updateMonthDisplay();\n    initAddEventListeners();\n    initModalEventListeners();\n};\n\n/**\n * Asynchronously updates the month display in the planner view.\n * Fetches and displays the updated planner data based on the specified direction (forwards or backwards).\n *\n * @async\n * @function\n * @returns {Promise<void>} A Promise that resolves when the update is complete or rejects on error.\n *\n * @throws {Error} If there is an error during the update process.\n */\nasync function updateMonthDisplay() {\n    try {\n        const courseId = getCourseId();\n        const plannerViews = document.querySelectorAll('.block_disealytics-planner-left-side');\n        plannerViews.forEach(planner => {\n            const day = parseInt(planner.getAttribute('data-day'), 10);\n            const month = parseInt(planner.getAttribute('data-month'), 10);\n            const year = parseInt(planner.getAttribute('data-year'), 10);\n            const navigateButtons = planner.querySelectorAll('.select-month-btn');\n\n            navigateButtons.forEach(navigateBtn => {\n                navigateBtn.addEventListener('click', async() => {\n                    const direction = navigateBtn.classList.contains('select-next-month') ? 'forwards' : 'backwards';\n                    await new Promise((resolve, reject) => {\n                        Ajax.call([{\n                            methodname: 'block_disealytics_change_planner_view',\n                            args: {\n                                courseid: courseId,\n                                day: day,\n                                month: month,\n                                year: year,\n                                direction: direction,\n                            }\n                        }])[0].done(() => {\n                            // Resolve the promise when done.\n                            resolve();\n                        }).fail(err => {\n                            // Reject the promise if there's an error.\n                            reject(err);\n                        });\n                    });\n\n                    // Update the view after saving the goal.\n                    await updateView(courseId, ['planner-view']);\n                });\n            });\n        });\n    } catch (error) {\n        // Handle any errors here.\n        window.console.error(error);\n    }\n}\n\n/**\n * Initializes event listeners for the planner modal.\n *\n */\nfunction initModalEventListeners() {\n    const showDetailsBtns = document.querySelectorAll('.planner-event-open-details-modal');\n    if (showDetailsBtns) {\n        showDetailsBtns.forEach((showDetailsBtn) => {\n            showDetailsBtn.addEventListener('click', async function() {\n                const eventFromDb = await getEventFromPlanner(this.getAttribute('data-event-id'));\n\n                const plannerEvent = {};\n                plannerEvent.dateid = eventFromDb.id;\n                plannerEvent.name = eventFromDb.name;\n                plannerEvent.courseid = eventFromDb.courseid;\n                plannerEvent.timestampStart = eventFromDb.timestart;\n                if (eventFromDb.timeduration > 0) {\n                    plannerEvent.hasEnd = true;\n                    plannerEvent.timestampEnd = eventFromDb.timestart + eventFromDb.timeduration;\n                } else {\n                    plannerEvent.hasEnd = false;\n                }\n                plannerEvent.location = eventFromDb.location;\n                plannerEvent.eventType = eventFromDb.eventtype;\n                plannerEvent.courseName = eventFromDb.coursefullname;\n\n\n                // Create the modal with the custom content.\n                const modal = await ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: plannerEvent.name,\n                    body: await Templates.render('block_disealytics/planner_event_modal', plannerEvent),\n                    removeOnClose: true,\n                });\n                modal.setSaveButtonText(await getString('planner_delete_event', 'block_disealytics'));\n                const cancelBtn = modal.getFooter().find(modal.getActionSelector('cancel'));\n                if (cancelBtn) {\n                    cancelBtn.css('display', 'none');\n                }\n                const saveBtn = modal.getRoot().find(modal.getActionSelector('save'));\n                if (saveBtn) {\n                    saveBtn.removeClass('btn-primary');\n                    saveBtn.addClass('btn-danger');\n                }\n                modal.show();\n                modal.getRoot().on(ModalEvents.save, async function() {\n                    await deleteEventFromPlanner(plannerEvent.dateid, plannerEvent.courseid);\n                    await updateView(getCourseId(), ['planner-view']);\n                });\n            });\n        });\n    }\n}\n\n/**\n * Initializes event listeners for adding events.\n *\n * @function\n * @name initAddEventListeners\n * @returns {void}\n */\nfunction initAddEventListeners() {\n    const addNewEventBtns = document.querySelectorAll('.block_disealytics-add-new-event-to-planner');\n    if (addNewEventBtns) {\n        addNewEventBtns.forEach((addNewEventBtn) => {\n            addNewEventBtn.addEventListener('click', async function() {\n                const modal = await ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: getString('planner_add_event_modal', 'block_disealytics'),\n                    body: await Templates.render('block_disealytics/planner_add_event_modal', {id: 1}),\n                    removeOnClose: true\n                });\n                modal.setSaveButtonText(await getString('planner_save_event', 'block_disealytics'));\n                await modal.show();\n\n                populateDateInputs(this.getAttribute('data-date'));\n                initButtonsInPlannerForm();\n                modal.getRoot().on(ModalEvents.save, async function() {\n                    await addEventToPlanner();\n                });\n            });\n        });\n    }\n}\n\n/**\n * Initializes event listeners for buttons in the planner form.\n * Handle changes in the planner form inputs and updates the corresponding fields accordingly.\n *\n * @function\n * @name initButtonsInPlannerForm\n * @returns {void}\n */\nfunction initButtonsInPlannerForm() {\n    const plannerNoEnd = document.getElementById('planner-no-end-input');\n    const plannerWithEnd = document.getElementById('planner-until-input');\n    const plannerDuration = document.getElementById('planner-duration-input');\n    const plannerRepetitions = document.getElementById('planner-event-repetitions-input-checkbox');\n\n    if (plannerNoEnd) {\n        plannerNoEnd.addEventListener('change', () => {\n            document.getElementById('planner-date-end-input').disabled = true;\n            document.getElementById('planner-time-end-input').disabled = true;\n            document.getElementById('planner-duration-text').disabled = true;\n        });\n    }\n\n    if (plannerWithEnd) {\n        plannerWithEnd.addEventListener('change', () => {\n            document.getElementById('planner-date-end-input').disabled = false;\n            document.getElementById('planner-time-end-input').disabled = false;\n            document.getElementById('planner-duration-text').disabled = true;\n        });\n    }\n\n    if (plannerDuration) {\n        plannerDuration.addEventListener('change', () => {\n            document.getElementById('planner-date-end-input').disabled = true;\n            document.getElementById('planner-time-end-input').disabled = true;\n            document.getElementById('planner-duration-text').disabled = false;\n        });\n    }\n\n    if (plannerRepetitions) {\n        plannerRepetitions.addEventListener('change', () => {\n            document.getElementById('planner-event-repetitions-input').disabled = !plannerRepetitions.checked;\n        });\n    }\n}\n\n/**\n * Populates date and time inputs in the planner form based on the provided date string.\n *\n * @function\n * @name populateDateInputs\n * @param {string} clickedDateInput - The date string in the format 'YYYY/MM/DD'.\n * @returns {void}\n */\nfunction populateDateInputs(clickedDateInput) {\n    const [year, month, day] = clickedDateInput.split('/');\n    const dateStartInput = document.getElementById('planner-date-start-input');\n    const timeStartInput = document.getElementById('planner-time-start-input');\n    const dateEndInput = document.getElementById('planner-date-end-input');\n    const timeEndInput = document.getElementById('planner-time-end-input');\n\n    const clickedDate = `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;\n    const now = new Date();\n    const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\n\n    dateStartInput.value = clickedDate;\n\n    dateEndInput.value = clickedDate;\n\n    timeStartInput.value = currentTime;\n    timeEndInput.value = currentTime;\n}\n\n/**\n * Combines date and time values from specified HTML elements to create a JavaScript Date object.\n *\n * @function\n * @name getCombinedDateTime\n * @param {string} dateId - The ID of the HTML element containing the date value.\n * @param {string} timeId - The ID of the HTML element containing the time value.\n * @returns {Date} - The JavaScript Date object representing the combined date and time.\n */\nfunction getCombinedDateTime(dateId, timeId) {\n    const date = document.getElementById(dateId).value;\n    const time = document.getElementById(timeId).value;\n    const combinedDateTimeString = `${date}T${time}`;\n    return new Date(combinedDateTimeString);\n}\n\n/**\n * Asynchronously adds an event to the planner by retrieving input values,\n * performing validation, and making an AJAX call to update the planner data.\n *\n * @async\n * @function\n * @name addEventToPlanner\n * @returns {Promise<boolean>} - A promise that resolves when the event is successfully added to the planner.\n * @throws {Error} - Throws an error if there is an issue during the process.\n */\nasync function addEventToPlanner() {\n    try {\n        const name = getValueById('planner-event-name-input');\n        const location = getValueById('planner-event-location-input');\n        const courseid = getCourseId();\n        const eventType = getValueById('planner-event-type-input');\n        const startDate = getCombinedDateTime('planner-date-start-input', 'planner-time-start-input');\n        const endDate = getCombinedDateTime('planner-date-end-input', 'planner-time-end-input');\n        const duration = getValueById('planner-duration-text');\n        const repetitionsCheckbox = document.getElementById('planner-event-repetitions-input-checkbox');\n        const repetitions = repetitionsCheckbox.checked ? getValueById('planner-event-repetitions-input') : 0;\n\n        const timestampStart = Math.floor(new Date(startDate).getTime() / 1000);\n        let calculatedDuration = 0;\n\n        // Validation with end date.\n        if (document.getElementById('planner-until-input').checked) {\n            const timestampEnd = Math.floor(new Date(endDate).getTime() / 1000);\n            switch (validateInputs(name, location, startDate, endDate, null, repetitionsCheckbox, repetitions)) {\n                case 'correct':\n                    // Calculate duration in seconds if endDate is set.\n                    calculatedDuration = timestampEnd - timestampStart;\n                    await new Promise((resolve, reject) => {\n                        Ajax.call([{\n                            methodname: 'block_disealytics_update_planner_event',\n                            args: {\n                                updatetype: 'add',\n                                dateid: null,\n                                name: name,\n                                courseid: courseid,\n                                timestart: timestampStart,\n                                timeduration: calculatedDuration,\n                                location: location === null ? '' : location,\n                                eventtype: eventType === null ? '' : eventType,\n                                repetitions: repetitions\n                            }\n                        }])[0].done(() => {\n                            // Resolve the promise when done.\n                            resolve();\n                        }).fail(err => {\n                            // Reject the promise if there's an error.\n                            reject(err);\n                        });\n                    });\n                    // Update the view after saving the event.\n                    await updateView(getCourseId(), ['planner-view']);\n                    return true;\n                case 'namemissing':\n                    await showMessage(document.getElementById('planner-name-missing'));\n                    return false;\n                case 'nameinvalid':\n                    await showMessage(document.getElementById('planner-name-invalid'));\n                    return false;\n                case 'dateinvalid':\n                    await showMessage(document.getElementById('planner-date-invalid'));\n                    return false;\n                case 'repetitionsinvalid':\n                    await showMessage(document.getElementById('planner-repetition-invalid'));\n                    return false;\n            }\n        } else if (document.getElementById('planner-duration-input').checked) {\n            // Validation with duration set.\n            switch (validateInputs(name, location, startDate, null, duration, repetitionsCheckbox, repetitions)) {\n                case 'correct':\n                    calculatedDuration = parseInt(duration, 10) * 60;\n                    await new Promise((resolve, reject) => {\n                        Ajax.call([{\n                            methodname: 'block_disealytics_update_planner_event',\n                            args: {\n                                updatetype: 'add',\n                                dateid: null,\n                                name: name,\n                                courseid: courseid,\n                                timestart: timestampStart,\n                                timeduration: calculatedDuration,\n                                location: location === null ? '' : location,\n                                eventtype: eventType === null ? '' : eventType,\n                                repetitions: repetitions\n                            }\n                        }])[0].done(() => {\n                            // Resolve the promise when done.\n                            resolve();\n                        }).fail(err => {\n                            // Reject the promise if there's an error.\n                            reject(err);\n                        });\n                    });\n                    // Update the view after saving the event.\n                    await updateView(getCourseId(), ['planner-view']);\n                    return true;\n                case 'namemissing':\n                    await showMessage(document.getElementById('planner-name-missing'));\n                    return false;\n                case 'nameinvalid':\n                    await showMessage(document.getElementById('planner-name-invalid'));\n                    return false;\n                case 'dateinvalid':\n                    await showMessage(document.getElementById('planner-date-invalid'));\n                    return false;\n                case 'repetitionsinvalid':\n                    await showMessage(document.getElementById('planner-repetition-invalid'));\n                    return false;\n            }\n        } else {\n            switch (validateInputs(name, location, startDate, null, null, repetitionsCheckbox, repetitions)) {\n                case 'correct':\n                    await new Promise((resolve, reject) => {\n                        Ajax.call([{\n                            methodname: 'block_disealytics_update_planner_event',\n                            args: {\n                                updatetype: 'add',\n                                dateid: null,\n                                name: name,\n                                courseid: courseid,\n                                timestart: timestampStart,\n                                timeduration: calculatedDuration,\n                                location: location === null ? '' : location,\n                                eventtype: eventType === null ? '' : eventType,\n                                repetitions: repetitions\n                            }\n                        }])[0].done(() => {\n                            // Resolve the promise when done.\n                            resolve();\n                        }).fail(err => {\n                            // Reject the promise if there's an error.\n                            reject(err);\n                        });\n                    });\n                    // Update the view after saving the event.\n                    await updateView(getCourseId(), ['planner-view']);\n                    return true;\n                case 'namemissing':\n                    await showMessage(document.getElementById('planner-name-missing'));\n                    return false;\n                case 'nameinvalid':\n                    await showMessage(document.getElementById('planner-name-invalid'));\n                    return false;\n                case 'dateinvalid':\n                    await showMessage(document.getElementById('planner-date-invalid'));\n                    return false;\n                case 'repetitionsinvalid':\n                    await showMessage(document.getElementById('planner-repetition-invalid'));\n                    return false;\n            }\n        }\n    } catch (error) {\n        window.console.error(error);\n    }\n    return false;\n}\n\n/**\n * Gets the event from the planner by making an AJAX call to receive the planner data.\n *\n * @async\n * @function\n * @name getEventFromPlanner\n * @param {string} id - The ID of the event.\n * @returns {Promise<Object>} - A promise that resolves with the event data.\n * @throws {Error} - Throws an error if there is an issue during the receiving process.\n */\nfunction getEventFromPlanner(id) {\n    return new Promise((resolve, reject) => {\n        Ajax.call([{\n            methodname: 'block_disealytics_get_planner_event',\n            args: {\n                dateid: id,\n            }\n        }])[0].done(function(data) {\n            resolve(data);\n        }).fail(function(err) {\n            reject(err);\n        });\n    });\n}\n\n/**\n * Deletes an event from the planner by making an AJAX call to update the planner data.\n *\n * @async\n * @function\n * @name deleteEventFromPlanner\n * @param {int} id - The ID of the event to be deleted.\n * @param {int} courseid - The ID of the course.\n * @throws {Error} - Throws an error if there is an issue during the deletion process.\n */\nasync function deleteEventFromPlanner(id, courseid) {\n    await new Promise((resolve, reject) => {\n        Ajax.call([{\n            methodname: 'block_disealytics_update_planner_event',\n            args: {\n                updatetype: 'delete',\n                courseid: courseid,\n                dateid: id,\n            }\n        }])[0].done(() => {\n            // Resolve the promise when done.\n            resolve();\n        }).fail(err => {\n            // Reject the promise if there's an error.\n            window.console.log(err);\n            reject(err);\n        });\n    });\n}\n\n/**\n * Validates input values for a planner event, checking for required fields and format.\n *\n * @function\n * @name validateInputs\n * @param {string} name - The name of the planner event.\n * @param {string} location - The location of the planner event.\n * @param {number} startDate - The start date of the planner event in milliseconds since the epoch.\n * @param {number | null} endDate - The end date of the planner event in milliseconds since the epoch, or null if no end date.\n * @param {number | null} duration - The duration of the planner event in minutes, or null if no duration.\n * @param {boolean} repCheckbox - Indicates if the repetition checkbox is checked.\n * @param {number | null} repetitions - The number of repetitions for the event, or null if no repetitions.\n * @returns {string} - True if all inputs are valid, otherwise false.\n */\nfunction validateInputs(name,\n                               location,\n                               startDate,\n                               endDate = null,\n                               duration = null,\n                               repCheckbox = false,\n                               repetitions = null) {\n    const eventsInvalid = document.getElementsByClassName('planner-invalid');\n\n    for (const event of eventsInvalid) {\n        event.classList.add('hidden');\n    }\n\n    if (name.trim() === '') {\n        return 'namemissing';\n    }\n\n    if (!/^[a-zA-Z\\d\\s!?äöüÄÖÜßéè@./\\-:]+$/.test(name)) {\n        return 'nameinvalid';\n    }\n\n    if (location.trim() !== '' && !/^[a-zA-Z\\d\\s!?äöüÄÖÜßéè@./\\-:]+$/.test(location)) {\n        return 'nameinvalid';\n    }\n\n    if (!startDate || isNaN(startDate)) {\n        return 'dateinvalid';\n    }\n\n    if (endDate !== null) {\n        if (!endDate || isNaN(endDate) || endDate <= startDate) {\n            return 'dateinvalid';\n        }\n    }\n\n    if (duration !== null) {\n        // Explicitly convert duration to a number.\n        const durationNumber = Number(duration);\n        if (isNaN(durationNumber)) {\n            return 'dateinvalid';\n        }\n    }\n\n    if (repCheckbox && (repetitions !== null)) {\n        const repNumber = Number(repetitions);\n        if (isNaN(repNumber)) {\n            return 'repetitionsinvalid';\n        }\n    }\n    return 'correct';\n}\n\n/**\n * Displays a message element for a short duration and then hides it.\n *\n * @param {HTMLElement} messageElement - The HTML element representing the message.\n * @returns {Promise<void>} A Promise that resolves after the message is hidden.\n */\nconst showMessage = async(messageElement) => {\n    messageElement.classList.remove('hidden');\n\n    await new Promise(resolve => setTimeout(resolve, 2000));\n\n    messageElement.classList.add('hidden');\n};\n\n\n"],"names":["getCombinedDateTime","dateId","timeId","date","document","getElementById","value","time","combinedDateTimeString","Date","validateInputs","name","location","startDate","endDate","duration","repCheckbox","repetitions","eventsInvalid","getElementsByClassName","event","classList","add","trim","test","isNaN","durationNumber","Number","repNumber","async","courseId","querySelectorAll","forEach","planner","day","parseInt","getAttribute","month","year","navigateBtn","addEventListener","direction","contains","Promise","resolve","reject","call","methodname","args","courseid","done","fail","err","error","window","console","updateMonthDisplay","addNewEventBtns","addNewEventBtn","modal","ModalFactory","create","type","types","SAVE_CANCEL","title","body","Templates","render","id","removeOnClose","setSaveButtonText","show","clickedDateInput","split","dateStartInput","timeStartInput","dateEndInput","timeEndInput","clickedDate","padStart","now","currentTime","getHours","toString","getMinutes","populateDateInputs","this","plannerNoEnd","plannerWithEnd","plannerDuration","plannerRepetitions","disabled","checked","initButtonsInPlannerForm","getRoot","on","ModalEvents","save","eventType","repetitionsCheckbox","timestampStart","Math","floor","getTime","calculatedDuration","timestampEnd","updatetype","dateid","timestart","timeduration","eventtype","showMessage","addEventToPlanner","initAddEventListeners","showDetailsBtns","showDetailsBtn","eventFromDb","data","plannerEvent","hasEnd","courseName","coursefullname","cancelBtn","getFooter","find","getActionSelector","css","saveBtn","removeClass","addClass","log","deleteEventFromPlanner","initModalEventListeners","messageElement","remove","setTimeout"],"mappings":"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"}