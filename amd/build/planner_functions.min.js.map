{"version":3,"file":"planner_functions.min.js","sources":["../src/planner_functions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport Ajax from 'core/ajax';\nimport {get_string as getString} from 'core/str';\nimport {updateView} from \"./update_view\";\nimport {getCourseId} from \"./view_selection\";\nimport {createDiseaModal, getValueById, showDiseaModal} from \"./add_interaction\";\n\nlet plannerModal = null;\n\n/**\n * Initialize the planner-view interactions.\n *\n */\nexport const init = async() => {\n    await updateMonthDisplay();\n    initDeleteEventListeners();\n    initAddEventListeners();\n};\n\n/**\n * Asynchronously updates the month display in the planner view.\n * Fetches and displays the updated planner data based on the specified direction (forwards or backwards).\n *\n * @async\n * @function\n * @returns {Promise<void>} A Promise that resolves when the update is complete or rejects on error.\n *\n * @throws {Error} If there is an error during the update process.\n */\nexport async function updateMonthDisplay() {\n    try {\n        const courseId = getCourseId();\n        const plannerViews = document.querySelectorAll('.block_disealytics-planner-left-side');\n        plannerViews.forEach(planner => {\n            const day = parseInt(planner.getAttribute('data-day'), 10);\n            const month = parseInt(planner.getAttribute('data-month'), 10);\n            const year = parseInt(planner.getAttribute('data-year'), 10);\n            const navigateButtons = planner.querySelectorAll('.select-month-btn');\n\n            navigateButtons.forEach(navigateBtn => {\n                navigateBtn.addEventListener('click', async() => {\n                    const direction = navigateBtn.classList.contains('select-next-month') ? 'forwards' : 'backwards';\n                    await new Promise((resolve, reject) => {\n                        Ajax.call([{\n                            methodname: 'block_disealytics_change_planner_view',\n                            args: {\n                                courseid: courseId,\n                                day: day,\n                                month: month,\n                                year: year,\n                                direction: direction,\n                            }\n                        }])[0].done(() => {\n                            // Resolve the promise when done.\n                            resolve();\n                        }).fail(err => {\n                            // Reject the promise if there's an error.\n                            reject(err);\n                        });\n                    });\n\n                    // Update the view after saving the goal.\n                    await updateView(courseId, ['planner-view']);\n                });\n            });\n        });\n    } catch (error) {\n        // Handle any errors here.\n        window.console.error(error);\n    }\n}\n\n/**\n * Initializes event listeners for buttons in the planner form.\n * Handle changes in the planner form inputs and updates the corresponding fields accordingly.\n *\n * @function\n * @name initButtonsInPlannerForm\n * @returns {void}\n */\nexport function initButtonsInPlannerForm() {\n    const plannerNoEnd = document.getElementById('planner-no-end-input');\n    const plannerWithEnd = document.getElementById('planner-until-input');\n    const plannerDuration = document.getElementById('planner-duration-input');\n    const plannerRepetitions = document.getElementById('planner-event-repetitions-input-checkbox');\n\n    if (plannerNoEnd) {\n        plannerNoEnd.addEventListener('change', () => {\n            document.getElementById('planner-date-end-input').disabled = true;\n            document.getElementById('planner-time-end-input').disabled = true;\n            document.getElementById('planner-duration-text').disabled = true;\n        });\n    }\n\n    if (plannerWithEnd) {\n        plannerWithEnd.addEventListener('change', () => {\n            document.getElementById('planner-date-end-input').disabled = false;\n            document.getElementById('planner-time-end-input').disabled = false;\n            document.getElementById('planner-duration-text').disabled = true;\n        });\n    }\n\n    if (plannerDuration) {\n        plannerDuration.addEventListener('change', () => {\n            document.getElementById('planner-date-end-input').disabled = true;\n            document.getElementById('planner-time-end-input').disabled = true;\n            document.getElementById('planner-duration-text').disabled = false;\n        });\n    }\n\n    if (plannerRepetitions) {\n        plannerRepetitions.addEventListener('change', () => {\n            document.getElementById('planner-event-repetitions-input').disabled = !plannerRepetitions.checked;\n        });\n    }\n}\n\n/**\n * Initializes event listeners for the planner form, including buttons for adding, saving and\n * canceling events. Also, handles interactions with the planner form inputs and the database.\n *\n * @function\n * @name initPlannerEventListeners\n * @returns {void}\n */\nexport function initPlannerEventListeners() {\n    // The button to add goals.\n    const saveDateBtns = document.querySelectorAll('.save-planner-date');\n    const cancelDateBtns = document.querySelectorAll('.cancel-planner-date');\n\n    // Saving event in database.\n    if (saveDateBtns) {\n        saveDateBtns.forEach((saveDateBtn) => {\n            saveDateBtn.addEventListener('click', async function() {\n                if (await addEventToPlanner()) {\n                    cancelDateBtns.forEach((cancelDateBtn) => {\n                        cancelDateBtn.click();\n                    });\n                }\n            });\n        });\n    }\n\n    // Cancel/reset the create an event form.\n    if (cancelDateBtns) {\n        cancelDateBtns.forEach((cancelDateBtn) => {\n            cancelDateBtn.addEventListener('click', async function() {\n                resetPlannerEventForm();\n            });\n        });\n    }\n}\n\n/**\n * Initializes event listeners for deleting events.\n *\n * @function\n * @name initDeleteEventListeners\n * @returns {void}\n */\nexport function initDeleteEventListeners() {\n    const deleteEventBtns = document.querySelectorAll('.delete-event-from-planner');\n\n    // Delete an event from the database.\n    if (deleteEventBtns) {\n        for (const deleteDateBtn of deleteEventBtns) {\n            deleteDateBtn.addEventListener('click', async function() {\n                // Extract the numeric part from the button's ID.\n                const dateid = this.id.match(/\\d+$/)[0];\n                // Call the deleteEvent function with the extracted dateid.\n                await deleteEventFromPlanner(dateid);\n            });\n        }\n    }\n}\n\n/**\n * Initializes event listeners for adding events.\n *\n * @function\n * @name initAddEventListeners\n * @returns {void}\n */\nexport function initAddEventListeners() {\n    const addNewEventBtns = document.querySelectorAll('.block_disealytics-add-new-event-to-planner');\n    if (addNewEventBtns) {\n        addNewEventBtns.forEach((addNewEventBtn) => {\n            addNewEventBtn.addEventListener('click', async function() {\n                plannerModal = await createDiseaModal(\n                    'block_disealytics/planner_add_event_modal',\n                    getString('planner_add_event_modal', 'block_disealytics'),\n                    1);\n\n                // Assuming showDiseaModal returns a promise.\n                await showDiseaModal(plannerModal);\n\n                // Add a delay to ensure the modal is fully shown (you may adjust the duration).\n                await new Promise(resolve => setTimeout(resolve, 500));\n\n                const clickedDate = this.getAttribute('data-date');\n                populateDateInputs(clickedDate);\n                initButtonsInPlannerForm();\n                initPlannerEventListeners();\n            });\n        });\n    }\n}\n\n/**\n * Populates date and time inputs in the planner form based on the provided date string.\n *\n * @function\n * @name populateDateInputs\n * @param {string} clickedDateInput - The date string in the format 'YYYY/MM/DD'.\n * @returns {void}\n */\nexport function populateDateInputs(clickedDateInput) {\n    const [year, month, day] = clickedDateInput.split('/');\n    const dateStartInput = document.getElementById('planner-date-start-input');\n    const timeStartInput = document.getElementById('planner-time-start-input');\n    const dateEndInput = document.getElementById('planner-date-end-input');\n    const timeEndInput = document.getElementById('planner-time-end-input');\n\n    const clickedDate = `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;\n    const now = new Date();\n    const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\n\n    dateStartInput.value = clickedDate;\n\n    dateEndInput.value = clickedDate;\n\n    timeStartInput.value = currentTime;\n    timeEndInput.value = currentTime;\n}\n\n/**\n * Resets the inputs and selections in the planner event form to their default values.\n * Also, hides any information messages related to the form.\n *\n * @function\n * @name resetPlannerEventForm\n * @returns {void}\n */\nexport function resetPlannerEventForm() {\n    // Reset Name Input.\n    document.getElementById('planner-event-name-input').value = '';\n\n    // Reset Date and Time Inputs.\n    const now = new Date();\n    // eslint-disable-next-line max-len\n    const currentDate = `${now.getFullYear()} - ${(now.getMonth() + 1).toString().padStart(2, '0')} - ${now.getDate().toString().padStart(2, '0')}`;\n    const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\n    document.getElementById('planner-date-start-input').value = currentDate;\n    document.getElementById('planner-time-start-input').value = currentTime;\n    document.getElementById('planner-date-end-input').value = currentDate;\n    document.getElementById('planner-time-end-input').value = currentTime;\n\n    // Reset Location Input.\n    document.getElementById('planner-event-location-input').value = '';\n\n    // Reset Duration Input.\n    document.getElementById('planner-duration-text').value = '90';\n\n    // Reset Radio Buttons.\n    document.getElementById('planner-no-end-input').checked = true;\n    document.getElementById('planner-until-input').checked = false;\n    document.getElementById('planner-duration-input').checked = false;\n\n    // Reset Checkbox.\n    document.getElementById('planner-event-repetitions-input-checkbox').checked = false;\n    document.getElementById('planner-event-repetitions-input').value = '1';\n\n    // Reset Info Messages.\n    document.getElementById('planner-name-invalid').classList.add('hidden');\n    document.getElementById('planner-name-missing').classList.add('hidden');\n    document.getElementById('planner-date-invalid').classList.add('hidden');\n}\n\n/**\n * Combines date and time values from specified HTML elements to create a JavaScript Date object.\n *\n * @function\n * @name getCombinedDateTime\n * @param {string} dateId - The ID of the HTML element containing the date value.\n * @param {string} timeId - The ID of the HTML element containing the time value.\n * @returns {Date} - The JavaScript Date object representing the combined date and time.\n */\nexport function getCombinedDateTime(dateId, timeId) {\n    const date = document.getElementById(dateId).value;\n    const time = document.getElementById(timeId).value;\n    const combinedDateTimeString = `${date}T${time}`;\n    return new Date(combinedDateTimeString);\n}\n\n/**\n * Asynchronously adds an event to the planner by retrieving input values,\n * performing validation, and making an AJAX call to update the planner data.\n *\n * @async\n * @function\n * @name addEventToPlanner\n * @returns {Promise<void>} - A promise that resolves when the event is successfully added to the planner.\n * @throws {Error} - Throws an error if there is an issue during the process.\n */\nexport async function addEventToPlanner() {\n    try {\n        const name = getValueById('planner-event-name-input');\n        const location = getValueById('planner-event-location-input');\n        const courseid = getCourseId();\n        const eventType = getValueById('planner-event-type-input');\n        const startDate = getCombinedDateTime('planner-date-start-input', 'planner-time-start-input');\n        const endDate = getCombinedDateTime('planner-date-end-input', 'planner-time-end-input');\n        const duration = getValueById('planner-duration-text');\n        const repetitionsCheckbox = document.getElementById('planner-event-repetitions-input-checkbox');\n        const repetitions = repetitionsCheckbox.checked ? getValueById('planner-event-repetitions-input') : 0;\n\n        const timestampStart = Math.floor(new Date(startDate).getTime() / 1000);\n        let calculatedDuration = 0;\n\n        // Validation with end date.\n        if (document.getElementById('planner-until-input').checked) {\n            const timestampEnd = Math.floor(new Date(endDate).getTime() / 1000);\n            switch (validateInputs(name, location, startDate, endDate, null, repetitionsCheckbox, repetitions)) {\n                case 'correct':\n                    // Calculate duration in seconds if endDate is set.\n                    calculatedDuration = timestampEnd - timestampStart;\n                    await new Promise((resolve, reject) => {\n                        Ajax.call([{\n                            methodname: 'block_disealytics_update_planner_event',\n                            args: {\n                                updatetype: 'add',\n                                dateid: null,\n                                name: name,\n                                courseid: courseid,\n                                timestart: timestampStart,\n                                timeduration: calculatedDuration,\n                                location: location === null ? '' : location,\n                                eventtype: eventType === null ? '' : eventType,\n                                repetitions: repetitions\n                            }\n                        }])[0].done(() => {\n                            // Resolve the promise when done.\n                            resolve();\n                        }).fail(err => {\n                            // Reject the promise if there's an error.\n                            reject(err);\n                        });\n                    });\n                    // Update the view after saving the event.\n                    await updateView(getCourseId(), ['planner-view']);\n                    return true;\n                case 'namemissing':\n                    await showMessage(document.getElementById('planner-name-missing'));\n                    return false;\n                case 'nameinvalid':\n                    await showMessage(document.getElementById('planner-name-invalid'));\n                    return false;\n                case 'dateinvalid':\n                    await showMessage(document.getElementById('planner-date-invalid'));\n                    return false;\n                case 'repetitionsinvalid':\n                    await showMessage(document.getElementById('planner-repetition-invalid'));\n                    return false;\n            }\n        } else if (document.getElementById('planner-duration-input').checked) {\n            // Validation with duration set.\n            switch (validateInputs(name, location, startDate, null, duration, repetitionsCheckbox, repetitions)) {\n                case 'correct':\n                    calculatedDuration = parseInt(duration, 10) * 60;\n                    await new Promise((resolve, reject) => {\n                        Ajax.call([{\n                            methodname: 'block_disealytics_update_planner_event',\n                            args: {\n                                updatetype: 'add',\n                                dateid: null,\n                                name: name,\n                                courseid: courseid,\n                                timestart: timestampStart,\n                                timeduration: calculatedDuration,\n                                location: location === null ? '' : location,\n                                eventtype: eventType === null ? '' : eventType,\n                                repetitions: repetitions\n                            }\n                        }])[0].done(() => {\n                            // Resolve the promise when done.\n                            resolve();\n                        }).fail(err => {\n                            // Reject the promise if there's an error.\n                            reject(err);\n                        });\n                    });\n                    // Update the view after saving the event.\n                    await updateView(getCourseId(), ['planner-view']);\n                    return true;\n                case 'namemissing':\n                    await showMessage(document.getElementById('planner-name-missing'));\n                    return false;\n                case 'nameinvalid':\n                    await showMessage(document.getElementById('planner-name-invalid'));\n                    return false;\n                case 'dateinvalid':\n                    await showMessage(document.getElementById('planner-date-invalid'));\n                    return false;\n                case 'repetitionsinvalid':\n                    await showMessage(document.getElementById('planner-repetition-invalid'));\n                    return false;\n            }\n        } else {\n            switch (validateInputs(name, location, startDate, null, null, repetitionsCheckbox, repetitions)) {\n                case 'correct':\n                    await new Promise((resolve, reject) => {\n                        Ajax.call([{\n                            methodname: 'block_disealytics_update_planner_event',\n                            args: {\n                                updatetype: 'add',\n                                dateid: null,\n                                name: name,\n                                courseid: courseid,\n                                timestart: timestampStart,\n                                timeduration: calculatedDuration,\n                                location: location === null ? '' : location,\n                                eventtype: eventType === null ? '' : eventType,\n                                repetitions: repetitions\n                            }\n                        }])[0].done(() => {\n                            // Resolve the promise when done.\n                            resolve();\n                        }).fail(err => {\n                            // Reject the promise if there's an error.\n                            reject(err);\n                        });\n                    });\n                    // Update the view after saving the event.\n                    await updateView(getCourseId(), ['planner-view']);\n                    return true;\n                case 'namemissing':\n                    await showMessage(document.getElementById('planner-name-missing'));\n                    return false;\n                case 'nameinvalid':\n                    await showMessage(document.getElementById('planner-name-invalid'));\n                    return false;\n                case 'dateinvalid':\n                    await showMessage(document.getElementById('planner-date-invalid'));\n                    return false;\n                case 'repetitionsinvalid':\n                    await showMessage(document.getElementById('planner-repetition-invalid'));\n                    return false;\n            }\n        }\n    } catch (error) {\n        window.console.error(error);\n    }\n}\n\n/**\n * Deletes an event from the planner by making an AJAX call to update the planner data.\n *\n * @async\n * @function\n * @name deleteEventFromPlanner\n * @param {string} id - The ID of the event to be deleted.\n * @throws {Error} - Throws an error if there is an issue during the deletion process.\n */\nexport function deleteEventFromPlanner(id) {\n    Ajax.call([{\n        methodname: 'block_disealytics_update_planner_event',\n        args: {\n            updatetype: 'delete',\n            dateid: id,\n        }\n    }])[0].done(async function() {\n        await updateView(getCourseId(), ['planner-view']);\n    }).fail(err => {\n        window.console.log(err);\n    });\n}\n\n/**\n * Validates input values for a planner event, checking for required fields and format.\n *\n * @function\n * @name validateInputs\n * @param {string} name - The name of the planner event.\n * @param {string} location - The location of the planner event.\n * @param {number} startDate - The start date of the planner event in milliseconds since the epoch.\n * @param {number | null} endDate - The end date of the planner event in milliseconds since the epoch, or null if no end date.\n * @param {number | null} duration - The duration of the planner event in minutes, or null if no duration.\n * @param {boolean} repCheckbox - Indicates if the repetition checkbox is checked.\n * @param {number | null} repetitions - The number of repetitions for the event, or null if no repetitions.\n * @returns {string} - True if all inputs are valid, otherwise false.\n */\nexport function validateInputs(name,\n                               location,\n                               startDate,\n                               endDate = null,\n                               duration = null,\n                               repCheckbox = false,\n                               repetitions = null) {\n    const eventsInvalid = document.getElementsByClassName('planner-invalid');\n\n    for (const event of eventsInvalid) {\n        event.classList.add('hidden');\n    }\n\n    if (name.trim() === '') {\n        return 'namemissing';\n    }\n\n    if (!/^[a-zA-Z\\d\\s!?äöüÄÖÜßéè@./\\-:]+$/.test(name)) {\n        return 'nameinvalid';\n    }\n\n    if (location.trim() !== '' && !/^[a-zA-Z\\d\\s!?äöüÄÖÜßéè@./\\-:]+$/.test(location)) {\n        return 'nameinvalid';\n    }\n\n    if (!startDate || isNaN(startDate)) {\n        return 'dateinvalid';\n    }\n\n    if (endDate !== null) {\n        if (!endDate || isNaN(endDate) || endDate <= startDate) {\n            return 'dateinvalid';\n        }\n    }\n\n    if (duration !== null) {\n        // Explicitly convert duration to a number.\n        const durationNumber = Number(duration);\n        if (isNaN(durationNumber)) {\n            return 'dateinvalid';\n        }\n    }\n\n    if (repCheckbox && (repetitions !== null)) {\n        const repNumber = Number(repetitions);\n        if (isNaN(repNumber)) {\n            return 'repetitionsinvalid';\n        }\n    }\n    return 'correct';\n}\n\n/**\n * Displays a message element for a short duration and then hides it.\n *\n * @param {HTMLElement} messageElement - The HTML element representing the message.\n * @returns {Promise<void>} A Promise that resolves after the message is hidden.\n */\nconst showMessage = async(messageElement) => {\n    messageElement.classList.remove('hidden');\n\n    await new Promise(resolve => setTimeout(resolve, 2000));\n\n    messageElement.classList.add('hidden');\n};\n\n\n"],"names":["plannerModal","updateMonthDisplay","courseId","document","querySelectorAll","forEach","planner","day","parseInt","getAttribute","month","year","navigateBtn","addEventListener","async","direction","classList","contains","Promise","resolve","reject","call","methodname","args","courseid","done","fail","err","error","window","console","initButtonsInPlannerForm","plannerNoEnd","getElementById","plannerWithEnd","plannerDuration","plannerRepetitions","disabled","checked","initPlannerEventListeners","saveDateBtns","cancelDateBtns","saveDateBtn","addEventToPlanner","cancelDateBtn","click","resetPlannerEventForm","initDeleteEventListeners","deleteEventBtns","deleteDateBtn","dateid","this","id","match","deleteEventFromPlanner","initAddEventListeners","addNewEventBtns","addNewEventBtn","setTimeout","populateDateInputs","clickedDateInput","split","dateStartInput","timeStartInput","dateEndInput","timeEndInput","clickedDate","padStart","now","Date","currentTime","getHours","toString","getMinutes","value","currentDate","getFullYear","getMonth","getDate","add","getCombinedDateTime","dateId","timeId","date","time","combinedDateTimeString","name","location","eventType","startDate","endDate","duration","repetitionsCheckbox","repetitions","timestampStart","Math","floor","getTime","calculatedDuration","timestampEnd","validateInputs","updatetype","timestart","timeduration","eventtype","showMessage","log","repCheckbox","eventsInvalid","getElementsByClassName","event","trim","test","isNaN","durationNumber","Number","repNumber","messageElement","remove"],"mappings":"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"}