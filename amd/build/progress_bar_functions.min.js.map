{"version":3,"file":"progress_bar_functions.min.js","sources":["../src/progress_bar_functions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {toggleAccordion} from \"./add_interaction\";\nimport Ajax from 'core/ajax';\nimport ModalFactory from 'core/modal_factory';\nimport {getCourseId} from \"./view_selection\";\nimport {updateView} from \"./update_view\";\nimport ProgressBarModal from \"./progress_bar_modal\";\n\n/**\n * Initialize the progress bar interface.\n */\nexport const init = () => {\n    const openProgressBarModalBtn = document.getElementById('block_disealytics_open-progress-bar-modal');\n\n    if (openProgressBarModalBtn) {\n        openProgressBarModalBtn.addEventListener('click', async() => {\n            const modal = await ModalFactory.create({\n                type: ProgressBarModal.TYPE,\n                removeOnClose: true,\n            });\n\n            modal.show();\n\n            initProgressBarModalAccordion();\n            initButtonsInOptionalInputModal();\n        });\n    }\n};\n\n/**\n * Initializes the progress bar modal accordion.\n */\nfunction initProgressBarModalAccordion() {\n    // Attach click event to each accordion head.\n    const accordion = document.getElementById('progress-bar-accordion');\n    const accordionHeads = accordion.querySelectorAll('.accordion-head');\n    accordionHeads.forEach((head, index) => {\n        head.addEventListener('click', () => {\n            toggleAccordion(accordion, index + 1);\n        });\n    });\n}\n\n/**\n * Initializes event listeners for buttons in the optional input modal.\n * Manages the logic for adding, updating, deleting, and cancelling optional inputs.\n */\nfunction initButtonsInOptionalInputModal() {\n    // Add input.\n    const addContainer = document.querySelector('.add-optional-input-container');\n    const addFieldBtn = document.getElementById('add-optional-input-fields');\n    const addBtn = document.getElementById('add-optional-input-button');\n    const cancelBtn = document.getElementById('cancel-optional-input-button');\n\n    if (addFieldBtn) {\n        addFieldBtn.addEventListener('click', () => {\n            addFieldBtn.classList.add('hidden');\n            addContainer.classList.remove('hidden');\n        });\n    }\n\n    if (addBtn) {\n        addBtn.addEventListener('click', async function() {\n            const material = document.getElementById('optional-input-document');\n            const currentpage = document.getElementById('optional-input-currentpage');\n            const lastpage = document.getElementById('optional-input-lastpage');\n            const time = document.getElementById('optional-input-expenditureoftime');\n            switch (validateInputs(currentpage.value, lastpage.value, time.value, material)) {\n                case 'correct':\n                    await addOptionalInput(material, currentpage, lastpage, time);\n                    resetInputFields();\n                    addFieldBtn.classList.remove('hidden');\n                    addContainer.classList.add('hidden');\n                    await showMessage(document.getElementById('optional-inputs-save-successful'));\n                    break;\n                case 'document':\n                    await showMessage(document.querySelector('.nodocumentselectederror'));\n                    break;\n                case 'pagenumber':\n                    await showMessage(document.querySelector('.pageerror'));\n                    break;\n                case 'pagezero':\n                    await showMessage(document.querySelector('.lastpagezeroerror'));\n                    break;\n                case 'negative':\n                    await showMessage(document.querySelector('.negativepageerror'));\n                    break;\n                case 'beyondlimit':\n                    await showMessage(document.querySelector('.pageoverflowerror'));\n                    break;\n                case 'timebeyond':\n                    await showMessage(document.querySelector('.expenditureoftimeoverflowerror'));\n                    break;\n                case 'notanumber':\n                    await showMessage(document.querySelector('.notanumbererror'));\n                    break;\n            }\n        });\n    }\n\n    if (cancelBtn) {\n        cancelBtn.addEventListener('click', () => {\n            addFieldBtn.classList.remove('hidden');\n            addContainer.classList.add('hidden');\n            resetInputFields();\n        });\n    }\n\n    // Delete input.\n    const deleteButtons = document.querySelectorAll('.delete-optional-input-button');\n\n    if (deleteButtons) {\n        deleteButtons.forEach((deleteBtn, index) => {\n            deleteBtn.addEventListener('click', async function() {\n                    const editContainer = document.querySelectorAll('.optional-input-container')[index];\n                    const id = editContainer.getAttribute('data-optionalinputid');\n                    await deleteOptionalInput(id);\n                    await showMessage(document.querySelector('#optional-inputs-deletion-successful'));\n                }\n            );\n        });\n    }\n\n    // Edit input.\n    const updateButtons = document.querySelectorAll('.update-optional-input-button');\n    const editButtons = document.querySelectorAll('.edit-optional-input-button');\n    const cancelUpdateButtons = document.querySelectorAll('.cancel-update-optional-input-button');\n\n    if (editButtons) {\n        editButtons.forEach((editBtn, index) => {\n            editBtn.addEventListener('click', () => {\n                const editContainer = document.querySelectorAll('.optional-input-container')[index];\n                editContainer.classList.add('hidden');\n                editContainer.nextElementSibling.classList.remove('hidden');\n            });\n        });\n    }\n\n    if (cancelUpdateButtons) {\n        cancelUpdateButtons.forEach((cancelUpdateBtn, index) => {\n            cancelUpdateBtn.addEventListener('click', () => {\n                const editContainer = document.querySelectorAll('.optional-input-container')[index];\n                editContainer.classList.remove('hidden');\n                editContainer.nextElementSibling.classList.add('hidden');\n            });\n        });\n    }\n\n    if (updateButtons) {\n        updateButtons.forEach((updateBtn, index) => {\n            updateBtn.addEventListener('click', async function() {\n                    const editForm = document.querySelectorAll('.edit-optional-input-container')[index];\n                    const currentpage = editForm.querySelector('.optional-input-update-currentpage');\n                    const lastpage = editForm.querySelector('.optional-input-update-lastpage');\n                    const time = editForm.querySelector('.optional-input-update-expenditureoftime');\n                    const material = editForm.querySelector('.optional-input-document-name');\n                    const id = editForm.getAttribute('data-optionalinputid');\n                    switch (validateInputs(currentpage.value, lastpage.value, time.value)) {\n                        case 'correct':\n                            await updateOptionalInput(id, material, currentpage, lastpage, time);\n                            editForm.classList.add('hidden');\n                            editForm.previousElementSibling.classList.remove('hidden');\n                            await showMessage(editForm.querySelector('.optional-inputs-update-successful'));\n                            break;\n                        case 'document':\n                            await showMessage(document.querySelector('.optional-input-update-warning.nodocumentselectederror'));\n                            break;\n                        case 'pagenumber':\n                            await showMessage(document.querySelector('.optional-input-update-warning.pageerror'));\n                            break;\n                        case 'pagezero':\n                            await showMessage(document.querySelector('.optional-input-update-warning.lastpagezeroerror'));\n                            break;\n                        case 'negative':\n                            await showMessage(document.querySelector('.optional-input-update-warning.negativepageerror'));\n                            break;\n                        case 'beyondlimit':\n                            await showMessage(document.querySelector('.optional-input-update-warning.pageoverflowerror'));\n                            break;\n                        case 'timebeyond':\n                            // eslint-disable-next-line max-len\n                            await showMessage(document.querySelector('.optional-input-update-warning.expenditureoftimeoverflowerror'));\n                            break;\n                        case 'notanumber':\n                            await showMessage(document.querySelector('.optional-input-update-warning.notanumbererror'));\n                            break;\n                    }\n                }\n            );\n        });\n    }\n}\n\n/**\n * Displays a message element for a short duration and then hides it.\n *\n * @param {HTMLElement} messageElement - The HTML element representing the message.\n * @returns {Promise<void>} A Promise that resolves after the message is hidden.\n */\nconst showMessage = async(messageElement) => {\n    messageElement.classList.remove('hidden');\n\n    await new Promise(resolve => setTimeout(resolve, 2000));\n\n    messageElement.classList.add('hidden');\n};\n\n/**\n * Resets the values of input fields to their default or initial state.\n *\n * @returns {void}\n */\nfunction resetInputFields() {\n    document.getElementById('optional-input-document').selectedIndex = 0;\n    document.getElementById('optional-input-currentpage').value = 1;\n    document.getElementById('optional-input-lastpage').value = 1;\n    document.getElementById('optional-input-expenditureoftime').value = 1;\n}\n\n/**\n * Validates input fields for optional inputs.\n *\n * @param {number} currentpage - The value of the current page.\n * @param {number} lastpage - The value of the last page.\n * @param {number} time - The value of the time spent.\n * @param {HTMLElement} [material=null] - The optional input material element.\n * @returns {string} A string indicating the validation result:\n *  - 'document': No document selected.\n *  - 'pagenumber': Current page exceeds last page.\n *  - 'pagezero': Last page is zero.\n *  - 'negative': Negative values entered.\n *  - 'beyondlimit': Page number exceeds limit.\n *  - 'timebeyond': Time exceeds limit.\n *  - 'notanumber': Non-numeric values entered.\n *  - 'correct': Inputs are valid.\n */\nfunction validateInputs(currentpage, lastpage, time, material = null) {\n    if (!(material === null)) {\n        const selectedOption = material.selectedOptions[0];\n        const dataDocumentSelected = selectedOption.getAttribute(\"data-documentselected\");\n        if (dataDocumentSelected === \"0\") {\n            return \"document\";\n        }\n    }\n    if (currentpage > lastpage) {\n        return \"pagenumber\";\n    }\n    if (lastpage === 0) {\n        return \"pagezero\";\n    }\n    if (lastpage < 0 || currentpage < 0 || time < 0) {\n        return \"negative\";\n    }\n    if (lastpage > 1000 || currentpage > 1000) {\n        return \"beyondlimit\";\n    }\n    if (time > 500) {\n        return \"timebeyond\";\n    }\n    if (isNaN(currentpage) || isNaN(lastpage) || isNaN(time)) {\n        return \"notanumber\";\n    }\n    return \"correct\";\n}\n\n/**\n * Adds an optional input to the system.\n *\n * @param {HTMLSelectElement} material - The material select element.\n * @param {HTMLInputElement} currentpage - The input element for current page.\n * @param {HTMLInputElement} lastpage - The input element for last page.\n * @param {HTMLInputElement} time - The input element for time expenditure.\n */\nfunction addOptionalInput(material, currentpage, lastpage, time) {\n    Ajax.call([{\n        methodname: 'block_disealytics_optional_input',\n        args: {\n            calltype: 'add',\n            id: -1,\n            courseid: getCourseId(),\n            name: material.value,\n            currentpage: currentpage.value,\n            lastpage: lastpage.value,\n            expenditureoftime: time.value,\n        }\n    }])[0].done(async function() {\n        resetInputFields();\n        await updateView(getCourseId(), ['progress-bar-view']);\n    }).fail(err => {\n        window.console.log(err);\n    });\n}\n\n/**\n * Updates an existing optional input in the system.\n *\n * @param {string} id - The unique identifier of the optional input.\n * @param {HTMLElement} material - The material element containing the updated content.\n * @param {HTMLInputElement} currentpage - The input element for current page.\n * @param {HTMLInputElement} lastpage - The input element for last page.\n * @param {HTMLInputElement} time - The input element for time expenditure.\n */\nfunction updateOptionalInput(id, material, currentpage, lastpage, time) {\n    Ajax.call([{\n        methodname: 'block_disealytics_optional_input',\n        args: {\n            calltype: 'update',\n            id: String(id),\n            courseid: getCourseId(),\n            name: material.textContent,\n            currentpage: currentpage.value,\n            lastpage: lastpage.value,\n            expenditureoftime: time.value,\n        }\n    }])[0].done(async function() {\n        await updateView(getCourseId(), ['progress-bar-view']);\n    }).fail(err => {\n        window.console.log(err);\n    });\n}\n\n/**\n * Deletes an existing optional input from the system.\n *\n * @param {string} id - The unique identifier of the optional input to be deleted.\n */\nfunction deleteOptionalInput(id) {\n    Ajax.call([{\n        methodname: 'block_disealytics_optional_input',\n        args: {\n            calltype: 'delete',\n            id: String(id),\n        }\n    }])[0].done(async function() {\n        await updateView(getCourseId(), ['progress-bar-view']);\n    }).fail(err => {\n        window.console.log(err);\n    });\n}\n"],"names":["openProgressBarModalBtn","document","getElementById","addEventListener","async","ModalFactory","create","type","ProgressBarModal","TYPE","removeOnClose","show","accordion","querySelectorAll","forEach","head","index","initProgressBarModalAccordion","addContainer","querySelector","addFieldBtn","addBtn","cancelBtn","classList","add","remove","material","currentpage","lastpage","time","validateInputs","value","call","methodname","args","calltype","id","courseid","name","expenditureoftime","done","resetInputFields","fail","err","window","console","log","addOptionalInput","showMessage","deleteButtons","deleteBtn","getAttribute","String","deleteOptionalInput","updateButtons","editButtons","cancelUpdateButtons","editBtn","editContainer","nextElementSibling","cancelUpdateBtn","updateBtn","editForm","textContent","updateOptionalInput","previousElementSibling","initButtonsInOptionalInputModal","messageElement","Promise","resolve","setTimeout","selectedIndex","selectedOptions","isNaN"],"mappings":"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"}