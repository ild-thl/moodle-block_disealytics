{"version":3,"file":"progress_bar_functions.min.js","sources":["../src/progress_bar_functions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {toggleAccordion} from \"./add_interaction\";\nimport Ajax from 'core/ajax';\nimport ModalFactory from 'core/modal_factory';\nimport Templates from \"core/templates\";\nimport {getCourseId} from \"./view_selection\";\nimport {updateView} from \"./update_view\";\nimport {get_string as getString} from 'core/str';\nimport ModalEvents from \"core/modal_events\";\n\nlet progressBarModals = [];\n\n/**\n * Initialize the progress bar interface.\n */\nexport const init = () => {\n    initProgressBarModal();\n};\n\n/**\n *\n */\nfunction initProgressBarModal() {\n    const progressBarModalBtns = document.querySelectorAll('.block_disealytics_open-progress-bar-modal');\n    if (progressBarModalBtns) {\n        progressBarModalBtns.forEach((progressBarModalBtn) => {\n            progressBarModalBtn.addEventListener('click', async function() {\n                const learningMaterials = await getLearningMaterials();\n\n                const progressBarModal = await ModalFactory.create({\n                    title: await getString('progress_config_title', 'block_disealytics'),\n                    body: await Templates.render('block_disealytics/progress_bar_modal', learningMaterials),\n                    removeOnClose: true,\n                });\n                progressBarModals.push(progressBarModal);\n                await progressBarModal.show();\n                initProgressBarModalAccordion();\n                initButtonsInProgressBarModal(learningMaterials);\n            });\n        });\n    }\n}\n\n/**\n * Initializes the progress bar modal accordion.\n */\nfunction initProgressBarModalAccordion() {\n    // Attach click event to each accordion head.\n    const accordion = document.getElementById('progress-bar-accordion');\n    const accordionHeads = accordion.querySelectorAll('.accordion-head');\n    accordionHeads.forEach((head, index) => {\n        head.addEventListener('click', () => {\n            toggleAccordion(accordion, index + 1);\n        });\n    });\n}\n\n/**\n * Initializes event listeners for buttons in the learning material modal.\n * Manages the logic for adding, updating, deleting, and cancelling learning materials.\n * @param {array} learningMaterials\n */\nfunction initButtonsInProgressBarModal(learningMaterials) {\n    // Open help modal.\n    const helpBtn = document.getElementById('block_disealytics_open-progress-bar-help-modal');\n\n    if (helpBtn) {\n        helpBtn.addEventListener('click', async() => {\n            const helpModal = await ModalFactory.create({\n                type: ModalFactory.types.OK,\n                title: await getString('progress_config_help_title', 'block_disealytics'),\n                body: await getString('learning_materials-view_help_info_text', 'block_disealytics'),\n                removeOnClose: true,\n            });\n            progressBarModals.push(helpModal);\n            await helpModal.show();\n        });\n    }\n\n    // Add input.\n    const addFieldBtn = document.getElementById('add-learning-material-fields');\n\n    if (addFieldBtn) {\n        addFieldBtn.addEventListener('click', async() => {\n            const addLearningMaterialModal = await ModalFactory.create({\n                type: ModalFactory.types.SAVE_CANCEL,\n                title: await getString('progress_config_help_title', 'block_disealytics'),\n                body: await Templates.render('block_disealytics/learning_material_add_inputs', learningMaterials),\n                removeOnClose: true,\n            });\n            addLearningMaterialModal.setSaveButtonText(await getString('learning_material_save', 'block_disealytics'));\n            progressBarModals.push(addLearningMaterialModal);\n            addLearningMaterialModal.show();\n            addLearningMaterialModal.getRoot().on(ModalEvents.save, async function() {\n                const material = document.getElementById('learning-material-document');\n                const currentpage = document.getElementById('learning-material-currentpage');\n                const lastpage = document.getElementById('learning-material-lastpage');\n                const time = document.getElementById('learning-material-expenditureoftime');\n                switch (validateInputs(currentpage.value, lastpage.value, time.value, material)) {\n                    case 'correct':\n                        await addLearningMaterial(material, currentpage, lastpage, time);\n                        break;\n                    case 'document':\n                        await showMessage(document.querySelector('.nodocumentselectederror'));\n                        break;\n                    case 'pagenumber':\n                        await showMessage(document.querySelector('.pageerror'));\n                        break;\n                    case 'pagezero':\n                        await showMessage(document.querySelector('.lastpagezeroerror'));\n                        break;\n                    case 'negative':\n                        await showMessage(document.querySelector('.negativepageerror'));\n                        break;\n                    case 'beyondlimit':\n                        await showMessage(document.querySelector('.pageoverflowerror'));\n                        break;\n                    case 'timebeyond':\n                        await showMessage(document.querySelector('.expenditureoftimeoverflowerror'));\n                        break;\n                    case 'notanumber':\n                        await showMessage(document.querySelector('.notanumbererror'));\n                        break;\n                }\n            });\n        });\n    }\n\n    // Delete input.\n    const deleteButtons = document.querySelectorAll('.delete-learning-material-button');\n\n    if (deleteButtons) {\n        deleteButtons.forEach((deleteBtn, index) => {\n            deleteBtn.addEventListener('click', async function() {\n                    const editContainer = document.querySelectorAll('.learning-material-container')[index];\n                    const id = editContainer.getAttribute('data-learningmaterialid');\n                    await deleteLearningMaterial(id);\n                }\n            );\n        });\n    }\n\n    // Edit input.\n    const updateButtons = document.querySelectorAll('.update-learning-material-button');\n    const editButtons = document.querySelectorAll('.edit-learning-material-button');\n    const cancelUpdateButtons = document.querySelectorAll('.cancel-update-learning-material-button');\n\n    if (editButtons) {\n        editButtons.forEach((editBtn, index) => {\n            editBtn.addEventListener('click', () => {\n                const editContainer = document.querySelectorAll('.learning-material-container')[index];\n                editContainer.classList.add('hidden');\n                editContainer.nextElementSibling.classList.remove('hidden');\n                const documentId = editContainer.getAttribute('data-learningmaterialid');\n                storeInitialValues(documentId);\n            });\n        });\n    }\n\n    if (cancelUpdateButtons) {\n        cancelUpdateButtons.forEach((cancelUpdateBtn, index) => {\n            cancelUpdateBtn.addEventListener('click', () => {\n                const editContainer = document.querySelectorAll('.learning-material-container')[index];\n                editContainer.classList.remove('hidden');\n                editContainer.nextElementSibling.classList.add('hidden');\n                const documentId = editContainer.getAttribute('data-learningmaterialid');\n                resetInputFields(documentId);\n            });\n        });\n    }\n\n    if (updateButtons) {\n        updateButtons.forEach((updateBtn, index) => {\n            updateBtn.addEventListener('click', async function() {\n                    const editForm = document.querySelectorAll('.edit-learning-material-container')[index];\n                    const currentpage = editForm.querySelector('.learning-material-update-currentpage');\n                    const lastpage = editForm.querySelector('.learning-material-update-lastpage');\n                    const time = editForm.querySelector('.learning-material-update-expenditureoftime');\n                    const material = editForm.querySelector('.learning-material-document-name');\n                    const id = editForm.getAttribute('data-learningmaterialid');\n                    switch (validateInputs(currentpage.value, lastpage.value, time.value)) {\n                        case 'correct':\n                            await updateLearningMaterial(id, material, currentpage, lastpage, time);\n                            editForm.classList.add('hidden');\n                            editForm.previousElementSibling.classList.remove('hidden');\n                            break;\n                        case 'document':\n                            await showMessage(document.querySelector('.learning-material-update-warning.nodocumentselectederror'));\n                            break;\n                        case 'pagenumber':\n                            await showMessage(document.querySelector('.learning-material-update-warning.pageerror'));\n                            break;\n                        case 'pagezero':\n                            await showMessage(document.querySelector('.learning-material-update-warning.lastpagezeroerror'));\n                            break;\n                        case 'negative':\n                            await showMessage(document.querySelector('.learning-material-update-warning.negativepageerror'));\n                            break;\n                        case 'beyondlimit':\n                            await showMessage(document.querySelector('.learning-material-update-warning.pageoverflowerror'));\n                            break;\n                        case 'timebeyond':\n                            // eslint-disable-next-line max-len\n                            await showMessage(document.querySelector('.learning-material-update-warning.expenditureoftimeoverflowerror'));\n                            break;\n                        case 'notanumber':\n                            await showMessage(document.querySelector('.learning-material-update-warning.notanumbererror'));\n                            break;\n                    }\n                }\n            );\n        });\n    }\n}\n\n/**\n * Displays a message element for a short duration and then hides it.\n *\n * @param {HTMLElement} messageElement - The HTML element representing the message.\n * @returns {Promise<void>} A Promise that resolves after the message is hidden.\n */\nconst showMessage = async(messageElement) => {\n    messageElement.classList.remove('hidden');\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    messageElement.classList.add('hidden');\n};\n\nlet initialValues = {};\n\n/**\n * Stores the initial values of the input fields.\n *\n * @param {int} documentId - The unique identifier of the learning material.\n * @returns {void}\n */\nfunction storeInitialValues(documentId) {\n    initialValues = {\n        currentPage: document.getElementById('learning-material-update-currentpage-' + documentId).value,\n        lastPage: document.getElementById('learning-material-update-lastpage-' + documentId).value,\n        expenditureOfTime: document.getElementById('learning-material-update-expenditureoftime-' + documentId).value\n    };\n}\n\n/**\n * Resets the input fields to their initial values.\n *\n * @param {int} documentId - The unique identifier of the learning material.\n * @returns {void}\n */\nfunction resetInputFields(documentId) {\n    document.getElementById('learning-material-update-currentpage-' + documentId).value = initialValues.currentPage;\n    document.getElementById('learning-material-update-lastpage-' + documentId).value = initialValues.lastPage;\n    document.getElementById('learning-material-update-expenditureoftime-' + documentId).value = initialValues.expenditureOfTime;\n}\n\n/**\n * Closes all modals.\n */\nconst closeModals = () => {\n    progressBarModals.forEach(modal => {\n        if (modal) {\n            modal.destroy();\n        }\n    });\n};\n\n/**\n * Retrieves learning materials from the database.\n * @returns {Promise} A Promise that resolves with the learning materials.\n */\nfunction getLearningMaterials() {\n    return new Promise((resolve, reject) => {\n        Ajax.call([{\n            methodname: 'block_disealytics_get_learning_materials',\n            args: {\n                courseid: getCourseId(),\n            }\n        }])[0].done(function(data) {\n            resolve(data);\n        }).fail(function(err) {\n            reject(err);\n        });\n    });\n\n}\n\n/**\n * Validates input fields for learning materials.\n *\n * @param {number} currentpage - The value of the current page.\n * @param {number} lastpage - The value of the last page.\n * @param {number} time - The value of the time spent.\n * @param {HTMLElement} [material=null] - The learning material element.\n * @returns {string} A string indicating the validation result:\n *  - 'document': No document selected.\n *  - 'pagenumber': Current page exceeds last page.\n *  - 'pagezero': Last page is zero.\n *  - 'negative': Negative values entered.\n *  - 'beyondlimit': Page number exceeds limit.\n *  - 'timebeyond': Time exceeds limit.\n *  - 'notanumber': Non-numeric values entered.\n *  - 'correct': Inputs are valid.\n */\nfunction validateInputs(currentpage, lastpage, time, material = null) {\n    if (!(material === null)) {\n        const selectedOption = material.selectedOptions[0];\n        const dataDocumentSelected = selectedOption.getAttribute(\"data-documentselected\");\n        if (dataDocumentSelected === \"0\") {\n            return \"document\";\n        }\n    }\n    if (currentpage > lastpage) {\n        return \"pagenumber\";\n    }\n    if (lastpage === 0) {\n        return \"pagezero\";\n    }\n    if (lastpage < 0 || currentpage < 0 || time < 0) {\n        return \"negative\";\n    }\n    if (lastpage > 1000 || currentpage > 1000) {\n        return \"beyondlimit\";\n    }\n    if (time > 500) {\n        return \"timebeyond\";\n    }\n    if (isNaN(currentpage) || isNaN(lastpage) || isNaN(time)) {\n        return \"notanumber\";\n    }\n    return \"correct\";\n}\n\n/**\n * Adds an learning material to the system.\n *\n * @param {HTMLSelectElement} material - The material select element.\n * @param {HTMLInputElement} currentpage - The input element for current page.\n * @param {HTMLInputElement} lastpage - The input element for last page.\n * @param {HTMLInputElement} time - The input element for time expenditure.\n */\nfunction addLearningMaterial(material, currentpage, lastpage, time) {\n    Ajax.call([{\n        methodname: 'block_disealytics_learning_material',\n        args: {\n            calltype: 'add',\n            id: -1,\n            courseid: getCourseId(),\n            name: material.value,\n            currentpage: currentpage.value,\n            lastpage: lastpage.value,\n            expenditureoftime: time.value,\n        }\n    }])[0].done(async function() {\n        await updateView(getCourseId(), ['progress-bar-view']);\n        await closeModals();\n    }).fail(err => {\n        window.console.log(err);\n    });\n}\n\n/**\n * Updates an existing learning material in the system.\n *\n * @param {string} id - The unique identifier of the learning material.\n * @param {HTMLElement} material - The material element containing the updated content.\n * @param {HTMLInputElement} currentpage - The input element for current page.\n * @param {HTMLInputElement} lastpage - The input element for last page.\n * @param {HTMLInputElement} time - The input element for time expenditure.\n */\nfunction updateLearningMaterial(id, material, currentpage, lastpage, time) {\n    Ajax.call([{\n        methodname: 'block_disealytics_learning_material',\n        args: {\n            calltype: 'update',\n            id: String(id),\n            courseid: getCourseId(),\n            name: material.textContent,\n            currentpage: currentpage.value,\n            lastpage: lastpage.value,\n            expenditureoftime: time.value,\n        }\n    }])[0].done(async function() {\n        await updateView(getCourseId(), ['progress-bar-view']);\n        await closeModals();\n    }).fail(err => {\n        window.console.log(err);\n    });\n}\n\n/**\n * Deletes an existing learning material from the system.\n *\n * @param {string} id - The unique identifier of the learning material to be deleted.\n */\nfunction deleteLearningMaterial(id) {\n    Ajax.call([{\n        methodname: 'block_disealytics_learning_material',\n        args: {\n            calltype: 'delete',\n            id: id,\n        }\n    }])[0].done(async function() {\n        await updateView(getCourseId(), ['progress-bar-view']);\n        await closeModals();\n    }).fail(err => {\n        window.console.log(err);\n    });\n}\n"],"names":["progressBarModals","progressBarModalBtns","document","querySelectorAll","forEach","progressBarModalBtn","addEventListener","async","learningMaterials","Promise","resolve","reject","call","methodname","args","courseid","done","data","fail","err","progressBarModal","ModalFactory","create","title","body","Templates","render","removeOnClose","push","show","accordion","getElementById","head","index","initProgressBarModalAccordion","helpBtn","helpModal","type","types","OK","addFieldBtn","addLearningMaterialModal","SAVE_CANCEL","setSaveButtonText","getRoot","on","ModalEvents","save","material","currentpage","lastpage","time","validateInputs","value","calltype","id","name","expenditureoftime","closeModals","window","console","log","addLearningMaterial","showMessage","querySelector","deleteButtons","deleteBtn","getAttribute","deleteLearningMaterial","updateButtons","editButtons","cancelUpdateButtons","editBtn","editContainer","classList","add","nextElementSibling","remove","documentId","initialValues","currentPage","lastPage","expenditureOfTime","storeInitialValues","cancelUpdateBtn","resetInputFields","updateBtn","editForm","String","textContent","updateLearningMaterial","previousElementSibling","initButtonsInProgressBarModal","initProgressBarModal","messageElement","setTimeout","modal","destroy","selectedOptions","isNaN"],"mappings":"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"}