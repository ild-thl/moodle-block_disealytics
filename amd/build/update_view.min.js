define("block_disealytics/update_view",["exports","core/ajax","core/templates","block_disealytics/view_selection","./learning_goals_functions"],(function(_exports,_ajax,_templates,_view_selection,_learning_goals_functions){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * Renders templates depending on the current user_preferences
   *
   * @module      block_disealytics/update_view
   * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.updateView=_exports.init=_exports.anyViewsEnabled=void 0,_ajax=_interopRequireDefault(_ajax),_templates=_interopRequireDefault(_templates);_exports.anyViewsEnabled=()=>{let anyViewsEnabled=!1;const viewList=(0,_view_selection.getViewlist)();for(const{enabled:enabled}of viewList)if(1===enabled){anyViewsEnabled=!0;break}return anyViewsEnabled};_exports.init=async(views,viewmode,courseid,agreementurl)=>{const callback=async function(){(0,_view_selection.setViewlist)(views),(0,_view_selection.setCourseId)(courseid),renderMainTemplate((0,_view_selection.getViewlist)(),viewmode,agreementurl),await updateView((0,_view_selection.getCourseId)(),void 0)};"complete"===document.readyState||"loading"!==document.readyState&&!document.documentElement.doScroll?await callback():document.addEventListener("DOMContentLoaded",(async function(){await callback()}))};const renderMainTemplate=(views,viewmode,agreementurl)=>{const maintemplatedata=[];maintemplatedata.viewtypes=views.map((view=>({viewname:view.viewname,enabled:1===view.enabled}))),maintemplatedata.viewmode=viewmode,maintemplatedata[viewmode]=!0,maintemplatedata.agreementurl=agreementurl,_templates.default.renderForPromise("block_disealytics/main",maintemplatedata).then((_ref=>{let{html:html,js:js}=_ref;return _templates.default.replaceNodeContents(".block_disealytics .content",html,js),renderEditingMode("0")})).catch((ex=>window.console.log(ex)))},updateView=async(courseid,views)=>{views&&views.forEach((view=>(0,_view_selection.setOld)(view)));let viewlist=JSON.stringify((0,_view_selection.getViewlist)());_ajax.default.call([{methodname:"block_disealytics_refresh_view",args:{courseid:courseid,viewlist:viewlist}}])[0].done((async response=>{const viewData=JSON.parse(response);(0,_view_selection.getViewlist)().forEach((_ref2=>{let{viewname:viewname}=_ref2;const viewSelectors=(0,_view_selection.getViewSelectors)(viewname),viewDataExists=viewname in viewData.views,currentView=document.querySelector(viewSelectors.select_view_class);if(viewDataExists){const viewDataToRender=viewData.views[viewname];renderViewTemplate(viewSelectors.select_view_class,viewDataToRender,viewData.editing,viewData.expanded_view,viewname)}else currentView&&(currentView.innerHTML="")})),renderEditingMode(viewData.editing),renderExpandedView(viewData.expanded_view),(0,_view_selection.getScrollTo)()&&(0,_view_selection.scrollToTargetAdjusted)((0,_view_selection.getScrollToElement)(),(0,_view_selection.getOffsetTopForScroll)())})).fail((err=>{window.console.log(err)}))};_exports.updateView=updateView;const renderEditingMode=isEnabled=>{const allViewsContainer=document.querySelector(".block_disealytics-all-views-container");allViewsContainer&&(allViewsContainer.classList.add("viewmode"),allViewsContainer.classList.remove("editmode"));const editButton=document.querySelector("#block_disealytics_main_edit_button");editButton&&editButton.classList.remove("text-danger");const viewContainers=document.querySelectorAll(".view-container");viewContainers&&[].forEach.call(viewContainers,(e=>{e.setAttribute("draggable","false"),e.classList.remove("draggable")}));const thingsToShow=document.querySelectorAll(".show-when-editing");[].forEach.call(thingsToShow,(e=>{e.classList.add("hidden")}));const thingsToHide=document.querySelectorAll(".hide-when-editing");if([].forEach.call(thingsToHide,(e=>{e.classList.remove("hidden")})),"1"===isEnabled){allViewsContainer&&(allViewsContainer.classList.remove("viewmode"),allViewsContainer.classList.add("editmode")),editButton&&editButton.classList.add("text-danger"),thingsToHide&&[].forEach.call(thingsToHide,(e=>{e.classList.add("hidden")})),thingsToShow&&[].forEach.call(thingsToShow,(e=>{e.classList.remove("hidden")}));let allViewTypesUsed=!0;(0,_view_selection.getViewlist)().forEach((_ref3=>{let{viewname:viewname,enabled:enabled}=_ref3;const viewContainer=document.querySelector("#block_disealytics-"+viewname);viewContainer.setAttribute("draggable","true"),viewContainer.classList.add("draggable"),0===enabled&&(allViewTypesUsed=!1)})),allViewTypesUsed?(document.querySelector(".show-when-viewtype-selectable").classList.add("hidden"),document.querySelector(".show-when-all-viewtypes-used").classList.remove("hidden")):(document.querySelector(".show-when-viewtype-selectable").classList.remove("hidden"),document.querySelector(".show-when-all-viewtypes-used").classList.add("hidden"))}},renderExpandedView=viewtype=>{const elementsHide=document.querySelectorAll(".hide-when-expanded"),elementsShow=document.querySelectorAll(".show-when-expanded");[].forEach.call(elementsHide,(e=>{e.classList.remove("hidden")})),[].forEach.call(elementsShow,(e=>{e.classList.add("hidden")}));const allViewContainer=document.querySelectorAll(".view-container");[].forEach.call(allViewContainer,(e=>{"block_disealytics-optional-inputs-view"!==e.getAttribute("id")&&e.classList.add("hidden")}));const expandableViews=document.querySelectorAll(".block_disealytics-expandable");if([].forEach.call(expandableViews,(e=>{e.classList.remove("active")})),"none"===viewtype){const expandableDivs=document.querySelectorAll(".block_disealytics-expandable");[].forEach.call(expandableDivs,(e=>{e.classList.add("hidden")}));const allViewContainer=document.querySelectorAll(_view_selection.selectors.views.select_everyView_container);[].forEach.call(allViewContainer,(e=>{e.classList.remove("hidden")}));const ToggleButton=document.querySelectorAll(".block_disealytics-toggle-expansion-btn");return[].forEach.call(ToggleButton,(e=>{const buttonOpen=e.querySelector(".expandable-open");buttonOpen&&buttonOpen.classList.remove("hidden");const buttonClose=e.querySelector(".expandable-close");buttonClose&&buttonClose.classList.add("hidden")})),void(0,_view_selection.setOffsetTopForScroll)(60)}[].forEach.call(elementsHide,(e=>{e.classList.add("hidden")})),[].forEach.call(elementsShow,(e=>{e.classList.remove("hidden")}));const viewSelectors=(0,_view_selection.getViewSelectors)(viewtype),currentView=document.querySelector(viewSelectors.select_view_class);currentView&&currentView.classList.remove("hidden");const expandableView=document.querySelector(viewSelectors.select_expandable_class);expandableView&&("optional-inputs-view"!==viewtype&&((0,_view_selection.setScrollToElement)("block_disealytics-panel-"+viewtype),(0,_view_selection.setOffsetTopForScroll)(100)),expandableView.classList.add("active"),expandableView.classList.remove("hidden"));const ButtonOpen=document.querySelector(".block_disealytics-toggle-expansion-btn-"+viewtype+" .expandable-open");ButtonOpen&&ButtonOpen.classList.add("hidden");const ButtonClose=document.querySelector(".block_disealytics-toggle-expansion-btn-"+viewtype+" .expandable-close");ButtonClose&&ButtonClose.classList.remove("hidden")},renderViewTemplate=(nodeSelector,viewInfo,editing,expandedView,viewtype)=>{(nodeIsEmpty(nodeSelector)||(0,_view_selection.viewIsOld)(viewtype))&&_templates.default.renderForPromise(viewInfo.template_path,viewInfo.data).then((_ref4=>{let{html:html,js:js}=_ref4;return _templates.default.replaceNodeContents(nodeSelector,html,js),renderEditingMode(editing),renderExpandedView(expandedView),"learning-goals-view"===viewtype&&(0,_learning_goals_functions.initGoalEventListeners)(),(0,_view_selection.unsetOld)(viewtype)})).catch((ex=>window.console.log(ex)))},nodeIsEmpty=selector=>null===document.querySelector(selector)||""===document.querySelector(selector).innerHTML.trim()}));

//# sourceMappingURL=update_view.min.js.map