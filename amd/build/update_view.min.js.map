{"version":3,"file":"update_view.min.js","sources":["../src/update_view.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Renders templates depending on the current user_preferences\n *\n * @module      block_disealytics/update_view\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\nimport Ajax from 'core/ajax';\nimport Template from 'core/templates';\nimport {\n    getViewlist,\n    getViewSelectors,\n    setViewlist,\n    scrollToTargetAdjusted,\n    setScrollToElement,\n    setOffsetTopForScroll,\n    getScrollTo,\n    getScrollToElement,\n    getOffsetTopForScroll,\n    viewIsOld,\n    setOld,\n    unsetOld,\n    selectors,\n    setCourseId,\n    getCourseId\n} from 'block_disealytics/view_selection';\nimport {\n    initGoalEventListeners\n} from \"./learning_goals_functions\";\nexport const anyViewsEnabled = () => {\n    // Initialize anyViewsEnabled to false.\n    let anyViewsEnabled = false;\n\n    // Check if any views are enabled.\n    const viewList = getViewlist();\n    for (const {enabled} of viewList) {\n        if (enabled === 1) {\n            anyViewsEnabled = true;\n            // Exit the loop as soon as an enabled view is found.\n            break;\n        }\n    }\n    return anyViewsEnabled;\n};\n\n/**\n * Initializes the plugin when it first loads by rendering the main template.\n *\n * @param {Array} views - An array of views to be used by the plugin.\n * @param {string} viewmode - The current view mode.\n * @param {number} courseid - The ID of the course associated with the plugin.\n * @param {string} agreementurl - URL at which the data policy can be viewed\n */\nexport const init = async(views, viewmode, courseid, agreementurl) => {\n    /**\n     * Callback function to execute when the document is ready.\n     */\n    const callback = async function() {\n        // Set the available views and configured views.\n        setViewlist(views);\n        setCourseId(courseid);\n\n        // Render the main template with the available views and view mode.\n        renderMainTemplate(getViewlist(), viewmode, agreementurl);\n\n        // Update the view (optional parameters are undefined in this context).\n        await updateView(getCourseId(), undefined);\n    };\n\n    // Check if the document is already loaded or loading and execute the callback accordingly.\n    if (\n        document.readyState === \"complete\" ||\n        (document.readyState !== \"loading\" && !document.documentElement.doScroll)\n    ) {\n        // Document is already loaded, execute the callback immediately.\n        await callback();\n    } else {\n        // Add an event listener for when the document is ready.\n        document.addEventListener(\"DOMContentLoaded\", async function() {\n            await callback();\n        });\n    }\n};\n\n\n/**\n * Called once when the plugin is loaded.\n * Loads the main.mustache template.\n * @param {array} views all implemented viewtypes\n * @param {string} viewmode the viewmode to load\n * @param {string} agreementurl - URL at which the data policy can be viewed\n */\nconst renderMainTemplate = (views, viewmode, agreementurl) => {\n    const maintemplatedata = [];\n    // Use map function to receive only the 'viewname' property of the given views as 'view'.\n    maintemplatedata.viewtypes = views.map(view => {\n        return {\n            'viewname': view.viewname,\n            'enabled': (view.enabled === 1)\n        };\n    });\n    maintemplatedata.viewmode = viewmode;\n    maintemplatedata[viewmode] = true;\n    maintemplatedata.agreementurl = agreementurl;\n\n    Template.renderForPromise(\"block_disealytics/main\", maintemplatedata)\n        .then(({html, js}) => {\n            Template.replaceNodeContents('.block_disealytics .content', html, js);\n             return renderEditingMode('0');\n        }).catch(ex => window.console.log(ex));\n};\n\n/**\n * Calls refresh_view.php to get all the data/views that should be displayed\n * renders the views that it got as a response, while erasing the ones that are still shown but shouldn't\n * @param {int} courseid the current courseid\n * @param {array} views list of views to update\n */\nexport const updateView = async(courseid, views) => {\n    // Set views to old.\n    if (views) {\n        views.forEach(view => setOld(view));\n    }\n    let viewlist = JSON.stringify(getViewlist());\n\n    // See, if there are any settings in the database for the viewtypes.\n    Ajax.call([{\n        methodname: 'block_disealytics_refresh_view',\n        args: {courseid, viewlist},\n    }])[0].done(async response => {\n        const viewData = JSON.parse(response);\n        const allViews = getViewlist();\n\n        allViews.forEach(({viewname}) => {\n            const viewSelectors = getViewSelectors(viewname);\n            const viewDataExists = viewname in viewData.views;\n            const currentView = document.querySelector(viewSelectors.selectViewClass);\n\n            if (viewDataExists) {\n                const viewDataToRender = viewData.views[viewname];\n                renderViewTemplate(\n                    viewSelectors.selectViewClass,\n                    viewDataToRender,\n                    viewData.editing,\n                    viewData.expanded_view,\n                    viewname\n                );\n            } else {\n                if (currentView) {\n                    currentView.innerHTML = \"\";\n                }\n            }\n        });\n        // Editing Mode.\n        renderEditingMode(viewData.editing);\n        renderExpandedView(viewData.expanded_view);\n        if (getScrollTo()) {\n            scrollToTargetAdjusted(getScrollToElement(), getOffsetTopForScroll());\n        }\n    }).fail(err => {\n        window.console.log(err);\n    });\n};\n\n/**\n * Determines whether the close-buttons inside the views and the add-view-buttons in the add-view-modal are shown\n * @param {string} isEnabled that represents whether the editing is on or off\n */\nconst renderEditingMode = (isEnabled) => {\n    const allViewsContainer = document.querySelector(\".block_disealytics-all-views-container\");\n    if (allViewsContainer) {\n        allViewsContainer.classList.add(\"viewmode\");\n        allViewsContainer.classList.remove(\"editmode\");\n    }\n    // Edit button to customize views.\n    const editButton = document.querySelector(\"#block_disealytics_main_edit_button\");\n    if (editButton) {\n        editButton.classList.remove(\"text-danger\");\n    }\n    // All views container.\n    const viewContainers = document.querySelectorAll(\".view-container\");\n    // All views container set draggable to false when not editing.\n    if (viewContainers) {\n        [].forEach.call(viewContainers, (e) => {\n            e.setAttribute('draggable', 'false');\n            e.classList.remove('draggable');\n        });\n    }\n    const thingsToShow = document.querySelectorAll(\".show-when-editing\");\n    [].forEach.call(thingsToShow, (e) => {\n        e.classList.add(\"hidden\");\n    });\n    const thingsToHide = document.querySelectorAll(\".hide-when-editing\");\n    [].forEach.call(thingsToHide, (e) => {\n        e.classList.remove(\"hidden\");\n    });\n    if (isEnabled === '1') {\n        if (allViewsContainer) {\n            allViewsContainer.classList.remove(\"viewmode\");\n            allViewsContainer.classList.add(\"editmode\");\n        }\n        // Editbutton design settings.\n        if (editButton) {\n            editButton.classList.add(\"text-danger\");\n            // ToggleButton.classList.remove(\"fa-toggle-off\");\n            // toggleButton.classList.add(\"fa-toggle-on\");\n        }\n        if (thingsToHide) {\n            [].forEach.call(thingsToHide, (e) => {\n                e.classList.add(\"hidden\");\n            });\n        }\n        if (thingsToShow) {\n            [].forEach.call(thingsToShow, (e) => {\n                e.classList.remove(\"hidden\");\n            });\n        }\n        // Checks if every view is used to give the user information that there is nothing to add when trying to add another one.\n        let allViewTypesUsed = true;\n        getViewlist().forEach(({viewname, enabled}) => {\n            const viewContainer = document.querySelector('#block_disealytics-' + viewname);\n            viewContainer.setAttribute('draggable', 'true');\n            viewContainer.classList.add('draggable');\n            if (enabled === 0) {\n                allViewTypesUsed = false;\n            }\n            });\n        // This handles the information given to the user, when all views are used or not.\n        if (allViewTypesUsed) {\n            document.querySelector('.show-when-viewtype-selectable').classList.add('hidden');\n            document.querySelector('.show-when-all-viewtypes-used').classList.remove('hidden');\n        } else {\n            document.querySelector('.show-when-viewtype-selectable').classList.remove('hidden');\n            document.querySelector('.show-when-all-viewtypes-used').classList.add('hidden');\n        }\n    }\n};\n\n/**\n * Renders the expanded part of a view, while hiding every other view\n * @param {string} viewtype that represents the view that should be expanded\n */\nconst renderExpandedView = (viewtype) => {\n    // The two objects elementsHide and elementsShow are used for the visibility in the block section.\n    const elementsHide = document.querySelectorAll('.hide-when-expanded');\n    const elementsShow = document.querySelectorAll('.show-when-expanded');\n    // Show all elements in the view in the block section.\n    [].forEach.call(elementsHide, (e) => {\n        e.classList.remove(\"hidden\");\n    });\n    // Hide all elements in the view in the block section.\n    [].forEach.call(elementsShow, (e) => {\n        e.classList.add(\"hidden\");\n    });\n    // Set every expandable windows in the views to hidden.\n    const allViewContainer = document.querySelectorAll(\".view-container\");\n    [].forEach.call(allViewContainer, (e) => {\n        if (e.getAttribute('id') !== 'block_disealytics-optional-inputs-view') {\n            e.classList.add(\"hidden\");\n        }\n    });\n    const expandableViews = document.querySelectorAll(\".block_disealytics-expandable\");\n    [].forEach.call(expandableViews, (e) => {\n        e.classList.remove(\"active\");\n    });\nif (viewtype === \"none\") {\n    const expandableDivs = document.querySelectorAll(\".block_disealytics-expandable\");\n    [].forEach.call(expandableDivs, (e) => {\n        e.classList.add(\"hidden\");\n        });\n    const allViewContainer = document.querySelectorAll(selectors.views.selectEveryViewContainer);\n    [].forEach.call(allViewContainer, (e) => {\n        e.classList.remove(\"hidden\");\n        });\n    // Sets every button to an open symbol button.\n    const ToggleButton = document.querySelectorAll(\".block_disealytics-toggle-expansion-btn\");\n    [].forEach.call(ToggleButton, (e) => {\n        const buttonOpen = e.querySelector(\".expandable-open\");\n        // On first load the buttonOpen is null. Therefore, we need an if check.\n        if (buttonOpen) {\n            buttonOpen.classList.remove('hidden');\n        }\n        const buttonClose = e.querySelector(\".expandable-close\");\n        // On first load the buttonClose is null. Therefore, we need an if check.\n        if (buttonClose) {\n            buttonClose.classList.add('hidden');\n        }\n        });\n    // The offset has to be saved temporary, because the logic of loading views has a special behaviour.\n    setOffsetTopForScroll(60);\n    return;\n}\n\n    // Hide all elements in the views when expanded.\n    [].forEach.call(elementsHide, (e) => {\n        e.classList.add(\"hidden\");\n    });\n    // Show all elements in the views when expanded.\n    [].forEach.call(elementsShow, (e) => {\n        e.classList.remove(\"hidden\");\n    });\n    // Hides every view except the expanded one.\n    const viewSelectors = getViewSelectors(viewtype);\n    const currentView = document.querySelector(viewSelectors.selectViewClass);\n    // On first load the currentView is null. Therefore, we need an if check.\nif (currentView) {\n    currentView.classList.remove(\"hidden\");\n}\n    const expandableView = document.querySelector(viewSelectors.selectExpandableClass);\n    // On first load the expandableView is null. Therefore, we need an if check.\nif (expandableView) {\n    if (viewtype !== 'optional-inputs-view') {\n        setScrollToElement('block_disealytics-panel-' + viewtype);\n        setOffsetTopForScroll(100);\n    }\n    expandableView.classList.add(\"active\");\n    expandableView.classList.remove(\"hidden\");\n}\n    const ButtonOpen = document.querySelector(\".block_disealytics-toggle-expansion-btn-\"\n        + viewtype + \" .expandable-open\");\nif (ButtonOpen) {\n    ButtonOpen.classList.add('hidden');\n}\n    const ButtonClose = document.querySelector(\".block_disealytics-toggle-expansion-btn-\"\n        + viewtype + \" .expandable-close\");\nif (ButtonClose) {\n    ButtonClose.classList.remove('hidden');\n}\n};\n\n/**\n * Renders a view-template\n * @param {string} nodeSelector div-container-selector in which the view is located\n * @param {object} viewInfo all template-data of the view\n * @param {string} editing whether editing is turned on right now\n * @param {string} expandedView which view is currently expanded\n * @param {string} viewtype current view name\n */\nconst renderViewTemplate = (nodeSelector, viewInfo, editing, expandedView, viewtype) => {\n    if (nodeIsEmpty(nodeSelector) || viewIsOld(viewtype)) {\n        Template.renderForPromise(viewInfo.template_path, viewInfo.data)\n            .then(({html, js}) => {\n                Template.replaceNodeContents(nodeSelector, html, js);\n                renderEditingMode(editing);\n                renderExpandedView(expandedView);\n                if (viewtype === 'learning-goals-view') {\n                    initGoalEventListeners();\n                }\n                return unsetOld(viewtype);\n            }).catch(ex => window.console.log(ex));\n    }\n};\n\n/**\n * Helper-function to check if a node in the dom-tree is truly empty\n * @param {string} selector the node-selector, typically a data-attribute\n * @returns {boolean} whether the node is empty or not\n */\nconst nodeIsEmpty = (selector) => {\n    if (document.querySelector(selector) === null) {\n        return true;\n    }\n    return (document.querySelector(selector).innerHTML.trim() === \"\");\n};\n"],"names":["anyViewsEnabled","viewList","enabled","async","views","viewmode","courseid","agreementurl","callback","renderMainTemplate","updateView","undefined","document","readyState","documentElement","doScroll","addEventListener","maintemplatedata","viewtypes","map","view","viewname","renderForPromise","then","_ref","html","js","replaceNodeContents","renderEditingMode","catch","ex","window","console","log","forEach","viewlist","JSON","stringify","call","methodname","args","done","viewData","parse","response","_ref2","viewSelectors","viewDataExists","currentView","querySelector","selectViewClass","viewDataToRender","renderViewTemplate","editing","expanded_view","innerHTML","renderExpandedView","fail","err","isEnabled","allViewsContainer","classList","add","remove","editButton","viewContainers","querySelectorAll","e","setAttribute","thingsToShow","thingsToHide","allViewTypesUsed","_ref3","viewContainer","viewtype","elementsHide","elementsShow","allViewContainer","getAttribute","expandableViews","expandableDivs","selectors","selectEveryViewContainer","ToggleButton","buttonOpen","buttonClose","expandableView","selectExpandableClass","ButtonOpen","ButtonClose","nodeSelector","viewInfo","expandedView","nodeIsEmpty","template_path","data","_ref4","selector","trim"],"mappings":"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"}