define("block_disealytics/view_selection",["exports"],(function(_exports){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.scrollToElement=_exports.scrollTo=_exports.oldViews=_exports.offsetTopForScroll=_exports.getViewlist=_exports.getViewSelectors=_exports.getScrollToElement=_exports.getScrollTo=_exports.getOffsetTopForScroll=_exports.getCourseId=void 0,_exports.scrollToTargetAdjusted=function(target,offset){const element=document.getElementById(target);if(element){const bodyRect=document.body.getBoundingClientRect().top,elementRect=element.getBoundingClientRect().top,offsetPosition=elementRect-bodyRect-offset;window.scrollTo({top:offsetPosition,behavior:"smooth"}),setScrollTo(!1)}},_exports.viewIsOld=_exports.updateViewlist=_exports.unsetOld=_exports.setViewlist=_exports.setScrollToElement=_exports.setScrollTo=_exports.setOld=_exports.setOffsetTopForScroll=_exports.setCourseId=_exports.selectors=void 0;
/**
   * Helper-Module to get dynamically generated node-selectors
   * Does need to keep track of the currently implemented viewtypes
   *
   * @module      block_disealytics/view_selection
   * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */
let viewlist=[],courseid=null;_exports.setViewlist=views=>{viewlist=views};const getViewlist=()=>viewlist.length>0?viewlist:null;_exports.getViewlist=getViewlist;_exports.updateViewlist=(modifiedView,write)=>{let updatedViews=[...getViewlist()],index=updatedViews.findIndex((view=>view.viewname===modifiedView));if(-1!==index){if(updatedViews.splice(index,1),"add"===write){const newView={viewname:modifiedView,enabled:1};updatedViews.push(newView)}if("delete"===write){const newView={viewname:modifiedView,enabled:0};updatedViews.push(newView)}}return updatedViews};_exports.setCourseId=id=>{courseid=id};_exports.getCourseId=()=>courseid;let oldViews=[];_exports.oldViews=oldViews;let scrollToElement="";_exports.scrollToElement=scrollToElement;let offsetTopForScroll=0;_exports.offsetTopForScroll=offsetTopForScroll;let scrollTo=!1;_exports.scrollTo=scrollTo;_exports.viewIsOld=view=>oldViews.includes(view);_exports.setOld=view=>{oldViews.includes(view)||oldViews.push(view)};_exports.getOffsetTopForScroll=()=>offsetTopForScroll;_exports.setOffsetTopForScroll=offset=>{_exports.offsetTopForScroll=offsetTopForScroll=offset};_exports.setScrollToElement=idOfView=>{_exports.scrollToElement=scrollToElement=idOfView};_exports.getScrollTo=()=>scrollTo;const setScrollTo=bool=>{_exports.scrollTo=scrollTo=bool};_exports.setScrollTo=setScrollTo;_exports.getScrollToElement=()=>scrollToElement;_exports.unsetOld=view=>{if(oldViews.includes(view)){let index=oldViews.indexOf(view);oldViews.splice(index,1)}};_exports.selectors={actions:{select_toggleExpansion_actiontype:'[data-actiontype="block_disealytics/toggle-expansion"]'},views:{select_everyView_container:'[data-containertype="block_disealytics/view-container"]',select_everyView_class:".view-container"},misc:{select_editContainer:'[data-container="block_disealytics/edit-container"]'}};_exports.getViewSelectors=viewname=>({actions:{select_add_attribute:"[data-action='block_disealytics/add-${viewname}']",select_add_class:".block_disealytics-add-"+viewname,select_remove_attribute:"[data-action='block_disealytics/remove-${viewname}']",select_toggleExpansion_attribute:"[data-action='block_disealytics/expand-${viewname}']"},select_view_container:"[data-container='block_disealytics/${viewname}']",select_view_class:".block_disealytics-container-"+viewname,select_expandable_container:"[data-container='block_disealytics/expandable-${viewname}']",select_expandable_class:".block_disealytics-expandable-"+viewname})}));

//# sourceMappingURL=view_selection.min.js.map