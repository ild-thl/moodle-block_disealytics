{"version":3,"file":"view_selection.min.js","sources":["../src/view_selection.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Helper-Module to get dynamically generated node-selectors\n * Does need to keep track of the currently implemented viewtypes\n *\n * @module      block_disealytics/view_selection\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nlet viewlist = [];\nlet courseid = null;\n\n/**\n * Set the viewtypes array based on the provided views. Sets them to 1 as in visible/enabled like so:\n * [{\"activity-view\":1},...]\n *\n * @param {Array} views - An array of views (from the project files).\n * @returns {void}\n */\nexport const setViewlist = (views) => {\n    viewlist = views;\n};\n\n/**\n * Keeps track of every view that is currently implemented.\n * Used by the other modules to generate the view-selectors.\n * @returns {string[] | null} List of viewtypes that are currently implemented and whether or not they are enabled (1 or 0).\n * Returns null if the array is empty.\n */\nexport const getViewlist = () => {\n    return viewlist.length > 0 ? viewlist : null;\n};\n\n/**\n * Update the view order and which views are visible in the DOM by modifying the viewtypes array.\n *\n * @param {string} modifiedView - The view to be modified.\n * @param {string} write - The write action to be performed ('delete' or other).\n * @returns {Array} - The updated viewtypes array.\n */\nexport const updateViewlist = (modifiedView, write) => {\n    let updatedViews = [...getViewlist()];\n    let index = updatedViews.findIndex((view) => view.viewname === modifiedView);\n    if (index !== -1) {\n        updatedViews.splice(index, 1);\n        if (write === 'add') {\n            const newView = {viewname: modifiedView, enabled: 1};\n            updatedViews.push(newView);\n        }\n        if (write === 'delete') {\n            const newView = {viewname: modifiedView, enabled: 0};\n            updatedViews.push(newView);\n        }\n    }\n    return updatedViews;\n};\n\n/**\n * Sets the course ID to the specified value.\n *\n * @param {number} id - The course ID to set.\n */\nexport const setCourseId = (id) => {\n    courseid = id;\n};\n\n/**\n * Retrieves the currently set course ID.\n *\n * @returns {number} The currently set course ID.\n */\nexport const getCourseId = () => {\n    return courseid;\n};\n\nexport let oldViews = [];\n// Saves the element name that a function will scroll to after a reload of a view.\nexport let scrollToElement = '';\n// The offset to top so the elements can be seen better.\nexport let offsetTopForScroll = 0;\n// Describes if a scroll is needed after a reload of a view.\nexport let scrollTo = false;\n\nexport const viewIsOld = (view) => {\n    return oldViews.includes(view);\n};\n\nexport const setOld = (view) => {\n    if (!oldViews.includes(view)) {\n        oldViews.push(view);\n    }\n};\n\nexport const getOffsetTopForScroll = () => {\n    return offsetTopForScroll;\n};\n\nexport const setOffsetTopForScroll = (offset) => {\n    offsetTopForScroll = offset;\n};\n\nexport const setScrollToElement = (idOfView) => {\n    scrollToElement = idOfView;\n};\n\nexport const getScrollTo = () => {\n    return scrollTo;\n};\n\nexport const setScrollTo = (bool) => {\n    scrollTo = bool;\n};\n\nexport const getScrollToElement = () => {\n    return scrollToElement;\n};\n\n/**\n * Scrolls to an Element after triggering an event\n * @param {String} target id of the element\n * @param {Number} offset value for more offset to the topside of the element\n */\nexport function scrollToTargetAdjusted(target, offset) {\n    // The target where the function will scroll to.\n    const element = document.getElementById(target);\n    // Gets the distance from top of the element.\n    if (element) {\n        const bodyRect = document.body.getBoundingClientRect().top;\n        // Gets the distance from top of the element.\n        const elementRect = element.getBoundingClientRect().top;\n        // Current location of the element (top distance).\n        const elementPosition = elementRect - bodyRect;\n        // The offsetPosition is needed because moodle has a navigation header, and it has a higher z-index.\n        // The position wouldn't be fully visible.\n        const offsetPosition = elementPosition - offset;\n\n        window.scrollTo({\n            top: offsetPosition,\n            behavior: 'smooth'\n        });\n        setScrollTo(false);\n    }\n}\n\nexport const unsetOld = (view) => {\n    if (oldViews.includes(view)) {\n        let index = oldViews.indexOf(view);\n        oldViews.splice(index, 1);\n    }\n};\n\n/**\n * Selectors object to access miscellaneous data-attributes\n * @type {{actions: {select_toggleExpansion_actiontype: string},\n * views: {select_everyView_container: string, select_everyView_class: string},\n * misc: {select_editContainer: string}}}\n */\nexport const selectors = {\n    actions: {\n        select_toggleExpansion_actiontype: '[data-actiontype=\"block_disealytics/toggle-expansion\"]',\n    },\n    views: {\n        select_everyView_container: '[data-containertype=\"block_disealytics/view-container\"]',\n        select_everyView_class: \".view-container\"\n    },\n    misc: {\n        select_editContainer: '[data-container=\"block_disealytics/edit-container\"]',\n    },\n};\n\n/**\n * Inserts the viewname into the data-attributes, so they can be later used as selectors\n * @param {string} viewname in the format of 'viewname-view'\n * @returns {{select_view_container: string, select_view_class: string,\n * select_expandable_container: string, select_expandable_class: string,\n * actions: {select_add_attribute: string, select_add_class: string,\n * select_remove_attribute: string, select_toggleExpansion_attribute: string}}}\n */\nexport const getViewSelectors = (viewname) => {\n    return {\n        actions: {\n            select_add_attribute: '[data-action=\\'block_disealytics/add-${viewname}\\']',\n            select_add_class: \".block_disealytics-add-\" + viewname,\n            select_remove_attribute: '[data-action=\\'block_disealytics/remove-${viewname}\\']',\n            select_toggleExpansion_attribute: '[data-action=\\'block_disealytics/expand-${viewname}\\']',\n        },\n        select_view_container: '[data-container=\\'block_disealytics/${viewname}\\']',\n        select_view_class: \".block_disealytics-container-\" + viewname,\n        select_expandable_container: '[data-container=\\'block_disealytics/expandable-${viewname}\\']',\n        select_expandable_class: \".block_disealytics-expandable-\" + viewname\n    };\n};\n"],"names":["target","offset","element","document","getElementById","bodyRect","body","getBoundingClientRect","top","elementRect","offsetPosition","window","scrollTo","behavior","setScrollTo","viewlist","courseid","views","getViewlist","length","modifiedView","write","updatedViews","index","findIndex","view","viewname","splice","newView","enabled","push","id","oldViews","scrollToElement","offsetTopForScroll","includes","idOfView","bool","indexOf","actions","select_toggleExpansion_actiontype","select_everyView_container","select_everyView_class","misc","select_editContainer","select_add_attribute","select_add_class","select_remove_attribute","select_toggleExpansion_attribute","select_view_container","select_view_class","select_expandable_container","select_expandable_class"],"mappings":"+ZAwIuCA,OAAQC,cAErCC,QAAUC,SAASC,eAAeJ,WAEpCE,QAAS,OACHG,SAAWF,SAASG,KAAKC,wBAAwBC,IAEjDC,YAAcP,QAAQK,wBAAwBC,IAK9CE,eAHkBD,YAAcJ,SAGGJ,OAEzCU,OAAOC,SAAS,CACZJ,IAAKE,eACLG,SAAU,WAEdC,aAAY;;;;;;;;IAnIhBC,SAAW,GACXC,SAAW,0BASaC,QACxBF,SAAWE,aASFC,YAAc,IAChBH,SAASI,OAAS,EAAIJ,SAAW,8DAUd,CAACK,aAAcC,aACrCC,aAAe,IAAIJ,eACnBK,MAAQD,aAAaE,WAAWC,MAASA,KAAKC,WAAaN,mBAChD,IAAXG,MAAc,IACdD,aAAaK,OAAOJ,MAAO,GACb,QAAVF,MAAiB,OACXO,QAAU,CAACF,SAAUN,aAAcS,QAAS,GAClDP,aAAaQ,KAAKF,YAER,WAAVP,MAAoB,OACdO,QAAU,CAACF,SAAUN,aAAcS,QAAS,GAClDP,aAAaQ,KAAKF,iBAGnBN,mCAQiBS,KACxBf,SAAWe,yBAQY,IAChBf,aAGAgB,SAAW,kCAEXC,gBAAkB,gDAElBC,mBAAqB,qDAErBtB,UAAW,gDAEIa,MACfO,SAASG,SAASV,sBAGNA,OACdO,SAASG,SAASV,OACnBO,SAASF,KAAKL,sCAIe,IAC1BS,kDAG2BjC,qCAClCiC,mBAAqBjC,oCAGUmC,oCAC/BH,gBAAkBG,+BAGK,IAChBxB,eAGEE,YAAeuB,yBACxBzB,SAAWyB,mEAGmB,IACvBJ,kCA8BcR,UACjBO,SAASG,SAASV,MAAO,KACrBF,MAAQS,SAASM,QAAQb,MAC7BO,SAASL,OAAOJ,MAAO,wBAUN,CACrBgB,QAAS,CACLC,kCAAmC,0DAEvCvB,MAAO,CACHwB,2BAA4B,0DAC5BC,uBAAwB,mBAE5BC,KAAM,CACFC,qBAAsB,kFAYGlB,WACtB,CACHa,QAAS,CACLM,qBAAsB,oDACtBC,iBAAkB,0BAA4BpB,SAC9CqB,wBAAyB,uDACzBC,iCAAkC,wDAEtCC,sBAAuB,mDACvBC,kBAAmB,gCAAkCxB,SACrDyB,4BAA6B,8DAC7BC,wBAAyB,iCAAmC1B"}